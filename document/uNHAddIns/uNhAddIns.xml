<?xml version="1.0"?>
<doc>
    <assembly>
        <name>uNhAddIns</name>
    </assembly>
    <members>
        <member name="T:uNhAddIns.Pagination.IPageProvider`1">
            <summary>
            Interface for pages provider.
            </summary>
            <typeparam name="T">The type of each row of the page.</typeparam>
            <seealso cref="T:uNhAddIns.Pagination.IPaginator"/>
        </member>
        <member name="T:uNhAddIns.Pagination.IPaginator">
            <summary>
            Classic basic interface for any type of general purpose paginator.
            </summary>
        </member>
        <member name="P:uNhAddIns.Pagination.IPaginator.CurrentPageNumber">
            <summary>
            The number of the current page.
            </summary>
        </member>
        <member name="P:uNhAddIns.Pagination.IPaginator.LastPageNumber">
            <summary>
            The number of the last page.
            </summary>
        </member>
        <member name="P:uNhAddIns.Pagination.IPaginator.NextPageNumber">
            <summary>
            The number of the next page.
            </summary>
        </member>
        <member name="P:uNhAddIns.Pagination.IPaginator.PreviousPageNumber">
            <summary>
            The number of the previous page.
            </summary>
        </member>
        <member name="P:uNhAddIns.Pagination.IPaginator.FirstPageNumber">
            <summary>
            The number of the first page.
            </summary>
        </member>
        <member name="P:uNhAddIns.Pagination.IPaginator.HasPrevious">
            <summary>
            True if has a previous page; false otherwise.
            </summary>
        </member>
        <member name="P:uNhAddIns.Pagination.IPaginator.HasNext">
            <summary>
            True if has a next page; false otherwise.
            </summary>
        </member>
        <member name="M:uNhAddIns.Pagination.IPageProvider`1.GetPage(System.Int32)">
            <summary>
            Get the list of objects for a given page number.
            </summary>
            <param name="pageNumber">The page number.</param>
            <returns>The list of objects.</returns>
        </member>
        <member name="M:uNhAddIns.Pagination.IPageProvider`1.GetFirstPage">
            <summary>
            Get the list of objects of the first page.
            </summary>
            <returns>The list of objects.</returns>
        </member>
        <member name="M:uNhAddIns.Pagination.IPageProvider`1.GetLastPage">
            <summary>
            Get the list of objects of the last page.
            </summary>
            <returns>The list of objects.</returns>
        </member>
        <member name="M:uNhAddIns.Pagination.IPageProvider`1.GetNextPage">
            <summary>
            Get the list of objects of the next page.
            </summary>
            <returns>The list of objects.</returns>
        </member>
        <member name="M:uNhAddIns.Pagination.IPageProvider`1.GetPreviousPage">
            <summary>
            Get the list of objects of the previous page.
            </summary>
            <returns>The list of objects.</returns>
        </member>
        <member name="M:uNhAddIns.Pagination.IPageProvider`1.GetCurrentPage">
            <summary>
            Get the list of objects of the current page.
            </summary>
            <returns>The list of objects.</returns>
        </member>
        <member name="P:uNhAddIns.Pagination.IPageProvider`1.PageSize">
            <summary>
            Number of visible objects of each page.
            </summary>
        </member>
        <member name="P:uNhAddIns.Pagination.IPageProvider`1.RowsCount">
            <summary>
            The total rows count.
            </summary>
        </member>
        <member name="P:uNhAddIns.Pagination.IPageProvider`1.HasPages">
            <summary>
            Get True if the paginator has query results. False in other case.
            </summary>
        </member>
        <member name="T:uNhAddIns.DynQuery.IDynClause">
            <summary>
            Interface for Dynamic query clause.
            </summary>
        </member>
        <member name="P:uNhAddIns.DynQuery.IQueryPart.Clause">
            <summary>
            The query complete clause.
            </summary>
        </member>
        <member name="P:uNhAddIns.DynQuery.IQueryPart.Expression">
            <summary>
            The query part.
            </summary>
        </member>
        <member name="P:uNhAddIns.DynQuery.IDynClause.HasMembers">
            <summary>
            The clause has some meber or not?
            </summary>
        </member>
        <member name="P:uNhAddIns.DynQuery.Where.Clause">
            <summary>
            The query clause.
            </summary>
        </member>
        <member name="P:uNhAddIns.DynQuery.Where.Expression">
            <summary>
            The query part.
            </summary>
        </member>
        <member name="P:uNhAddIns.DynQuery.Where.HasMembers">
            <summary>
            The clause has some meber or not?
            </summary>
        </member>
        <member name="T:uNhAddIns.Criterions.EqOrNullExpression">
            <summary>
            An <see cref="T:NHibernate.Expression.ICriterion"/> that represents an "equal" or "null" constraint dependig on
            the value of the property.
            </summary>
            <seealso cref="T:NHibernate.Expression.EqExpression"/>
            <seealso cref="T:NHibernate.Expression.NullExpression"/>
        </member>
        <member name="M:uNhAddIns.Criterions.EqOrNullExpression.#ctor(System.String,System.Object)">
            <summary>
            Initialize a new instance of the <see cref="T:uNhAddIns.Criterions.EqOrNullExpression"/> class for a named
            Property and its value.
            </summary>
            <param name="propertyName">The name of the Property in the class.</param>
            <param name="value">The value for the Property.</param>
        </member>
        <member name="T:uNhAddIns.Transform.PositionalToBeanResultTransformer">
            <summary>
            Result transformer that allows to transform a result to 
            a user specified class which will be populated via setter  
            methods or fields matching the alias names. 
            </summary>
            <example>
            <code>
            IList resultWithAliasedBean = s.CreateQuery(select f.Name, f.Description from Foo f)
            			.SetResultTransformer(new PositionalToBeanResultTransformer(typeof (NoFoo), new string[] {"_name", "_description"}))
            			.List();
            
            NoFoo dto = (NoFoo)resultWithAliasedBean[0];
            </code>
            </example>
            <remarks>
            If you have a <see cref="T:NHibernate.ICriteria"/> or a <see cref="T:NHibernate.IQuery"/> with aliases you can use
            <see cref="T:NHibernate.Transform.AliasToBeanResultTransformer"/> class.
            </remarks>
        </member>
        <member name="M:uNhAddIns.Transform.PositionalToBeanResultTransformer.#ctor(System.Type,System.String[])">
            <summary>
            Initializes a new instance of the PositionalToBeanResultTransformer class.
            </summary>
            <param name="resultClass">The return <see cref="T:System.Type"/>.</param>
            <param name="positionalAliases">Alias for each position of the query.</param>
        </member>
        <member name="T:uNhAddIns.NH.Impl.DetachedNamedQuery">
            <summary>
            Named query in "detached mode" where the NHibernate session is not available.
            </summary>
            <seealso cref="T:NHibernate.IQuery"/>
            <seealso cref="M:NHibernate.ISession.GetNamedQuery(System.String)"/>
            <seealso cref="T:uNhAddIns.NH.Impl.AbstractDetachedQuery"/>
        </member>
        <member name="T:uNhAddIns.NH.Impl.AbstractDetachedQuery">
            <summary>
            Base class to create queries in "detached mode" where the NHibernate session is not available.
            </summary>
            <seealso cref="T:NHibernate.Impl.AbstractQueryImpl"/>
            <remarks>
            The behaviour of each method is basically the same of <see cref="T:NHibernate.Impl.AbstractQueryImpl"/> methods.
            The main difference is on <see cref="M:uNhAddIns.NH.Impl.AbstractDetachedQuery.SetProperties(System.Object)"/>:
            If you mix <see cref="T:System.Object"/> with named parameters setter, if same param name are found,
            the value of the parameter setter override the value read from the POCO.
            </remarks>
        </member>
        <member name="T:uNhAddIns.NH.IDetachedQuery">
            <summary>
            Interface to create queries in "detached mode" where the NHibernate session is not available.
            All methods have the same semantics as the corresponding methods of the <see cref="T:NHibernate.IQuery"/> interface.
            </summary>
            <remarks>
            This interface, and it's implementations, hare availables on NH-SVN-trunk.
            If you are using the trunk is better to use the official version.
            </remarks>
        </member>
        <member name="M:uNhAddIns.NH.IDetachedQuery.GetExecutableQuery(NHibernate.ISession)">
            <summary>
            Get an executable instance of <see cref="T:NHibernate.IQuery"/>, to actually run the query.
            </summary>
        </member>
        <member name="M:uNhAddIns.NH.IDetachedQuery.SetMaxResults(System.Int32)">
            <summary>
            Set the maximum number of rows to retrieve.
            </summary>
            <param name="maxResults">The maximum number of rows to retreive.</param>
        </member>
        <member name="M:uNhAddIns.NH.IDetachedQuery.SetFirstResult(System.Int32)">
            <summary>
            Sets the first row to retrieve.
            </summary>
            <param name="firstResult">The first row to retreive.</param>
        </member>
        <member name="M:uNhAddIns.NH.IDetachedQuery.SetCacheable(System.Boolean)">
            <summary>
            Enable caching of this query result set.
            </summary>
            <param name="cacheable">Should the query results be cacheable?</param>
        </member>
        <member name="M:uNhAddIns.NH.IDetachedQuery.SetCacheRegion(System.String)">
            Set the name of the cache region.
            <param name="cacheRegion">The name of a query cache region, or <see langword="null" />
            for the default query cache</param>
        </member>
        <member name="M:uNhAddIns.NH.IDetachedQuery.SetForceCacheRefresh(System.Boolean)">
            Should the query force a refresh of the specified query cache region?
            This is particularly useful in cases where underlying data may have been
            updated via a seperate process (i.e., not modified through Hibernate) and
            allows the application to selectively refresh the query cache regions
            based on its knowledge of those events.
            <param name="forceCacheRefresh">Should the query result in a forceable refresh of
            the query cache?</param>
        </member>
        <member name="M:uNhAddIns.NH.IDetachedQuery.SetTimeout(System.Int32)">
            <summary>
            The timeout for the underlying ADO query
            </summary>
            <param name="timeout"></param>
        </member>
        <member name="M:uNhAddIns.NH.IDetachedQuery.SetLockMode(System.String,NHibernate.LockMode)">
            <summary>
            Set the lockmode for the objects idententified by the
            given alias that appears in the <c>FROM</c> clause.
            </summary>
            <param name="alias">alias a query alias, or <c>this</c> for a collection filter</param>
            <param name="lockMode"></param>
        </member>
        <member name="M:uNhAddIns.NH.IDetachedQuery.SetParameter(System.Int32,System.Object,NHibernate.Type.IType)">
            <summary>
            Bind a value to an indexed parameter.
            </summary>
            <param name="position">Postion of the parameter in the query, numbered from <c>0</c></param>
            <param name="val">The possibly null parameter value</param>
            <param name="type">The Hibernate type</param>
        </member>
        <member name="M:uNhAddIns.NH.IDetachedQuery.SetParameter(System.String,System.Object,NHibernate.Type.IType)">
            <summary>
            Bind a value to a named query parameter
            </summary>
            <param name="name">The name of the parameter</param>
            <param name="val">The possibly null parameter value</param>
            <param name="type">The NHibernate <see cref="T:NHibernate.Type.IType"/>.</param>
        </member>
        <member name="M:uNhAddIns.NH.IDetachedQuery.SetParameter(System.Int32,System.Object)">
            <summary>
            Bind a value to an indexed parameter, guessing the Hibernate type from
            the class of the given object.
            </summary>
            <param name="position">The position of the parameter in the query, numbered from <c>0</c></param>
            <param name="val">The non-null parameter value</param>
        </member>
        <member name="M:uNhAddIns.NH.IDetachedQuery.SetParameter(System.String,System.Object)">
            <summary>
            Bind a value to a named query parameter, guessing the NHibernate <see cref="T:NHibernate.Type.IType"/>
            from the class of the given object.
            </summary>
            <param name="name">The name of the parameter</param>
            <param name="val">The non-null parameter value</param>
        </member>
        <member name="M:uNhAddIns.NH.IDetachedQuery.SetParameterList(System.String,System.Collections.IEnumerable,NHibernate.Type.IType)">
            <summary>
            Bind multiple values to a named query parameter. This is useful for binding a list
            of values to an expression such as <c>foo.bar in (:value_list)</c>
            </summary>
            <param name="name">The name of the parameter</param>
            <param name="vals">A collection of values to list</param>
            <param name="type">The Hibernate type of the values</param>
        </member>
        <member name="M:uNhAddIns.NH.IDetachedQuery.SetParameterList(System.String,System.Collections.IEnumerable)">
            <summary>
            Bind multiple values to a named query parameter, guessing the Hibernate
            type from the class of the first object in the collection. This is useful for binding a list
            of values to an expression such as <c>foo.bar in (:value_list)</c>
            </summary>
            <param name="name">The name of the parameter</param>
            <param name="vals">A collection of values to list</param>
        </member>
        <member name="M:uNhAddIns.NH.IDetachedQuery.SetProperties(System.Object)">
            <summary>
            Bind the property values of the given object to named parameters of the query,
            matching property names with parameter names and mapping property types to
            Hibernate types using heuristics.
            </summary>
            <param name="obj">Any POCO</param>
        </member>
        <member name="M:uNhAddIns.NH.IDetachedQuery.SetAnsiString(System.Int32,System.String)">
            <summary>
            Bind an instance of a <see cref="T:System.String"/> to an indexed parameter
            using an NHibernate <see cref="T:NHibernate.Type.AnsiStringType"/>.
            </summary>
            <param name="position">The position of the parameter in the query string, numbered from <c>0</c></param>
            <param name="val">A non-null instance of a <see cref="T:System.String"/>.</param>
        </member>
        <member name="M:uNhAddIns.NH.IDetachedQuery.SetAnsiString(System.String,System.String)">
            <summary>
            Bind an instance of a <see cref="T:System.String"/> to a named parameter
            using an NHibernate <see cref="T:NHibernate.Type.AnsiStringType"/>.
            </summary>
            <param name="name">The name of the parameter</param>
            <param name="val">A non-null instance of a <see cref="T:System.String"/>.</param>
        </member>
        <member name="M:uNhAddIns.NH.IDetachedQuery.SetBinary(System.Int32,System.Byte[])">
            <summary>
            Bind an instance of a <see cref="T:System.Byte"/> array to an indexed parameter
            using an NHibernate <see cref="T:NHibernate.Type.BinaryType"/>.
            </summary>
            <param name="position">The position of the parameter in the query string, numbered from <c>0</c></param>
            <param name="val">A non-null instance of a <see cref="T:System.Byte"/> array.</param>
        </member>
        <member name="M:uNhAddIns.NH.IDetachedQuery.SetBinary(System.String,System.Byte[])">
            <summary>
            Bind an instance of a <see cref="T:System.Byte"/> array to a named parameter
            using an NHibernate <see cref="T:NHibernate.Type.BinaryType"/>.
            </summary>
            <param name="name">The name of the parameter</param>
            <param name="val">A non-null instance of a <see cref="T:System.Byte"/> array.</param>
        </member>
        <member name="M:uNhAddIns.NH.IDetachedQuery.SetBoolean(System.Int32,System.Boolean)">
            <summary>
            Bind an instance of a <see cref="T:System.Boolean"/> to an indexed parameter
            using an NHibernate <see cref="T:NHibernate.Type.BooleanType"/>.
            </summary>
            <param name="position">The position of the parameter in the query string, numbered from <c>0</c></param>
            <param name="val">A non-null instance of a <see cref="T:System.Boolean"/>.</param>
        </member>
        <member name="M:uNhAddIns.NH.IDetachedQuery.SetBoolean(System.String,System.Boolean)">
            <summary>
            Bind an instance of a <see cref="T:System.Boolean"/> to a named parameter
            using an NHibernate <see cref="T:NHibernate.Type.BooleanType"/>.
            </summary>
            <param name="name">The name of the parameter</param>
            <param name="val">A non-null instance of a <see cref="T:System.Boolean"/>.</param>
        </member>
        <member name="M:uNhAddIns.NH.IDetachedQuery.SetByte(System.Int32,System.Byte)">
            <summary>
            Bind an instance of a <see cref="T:System.Byte"/> to an indexed parameter
            using an NHibernate <see cref="T:NHibernate.Type.ByteType"/>.
            </summary>
            <param name="position">The position of the parameter in the query string, numbered from <c>0</c></param>
            <param name="val">A non-null instance of a <see cref="T:System.Byte"/>.</param>
        </member>
        <member name="M:uNhAddIns.NH.IDetachedQuery.SetByte(System.String,System.Byte)">
            <summary>
            Bind an instance of a <see cref="T:System.Byte"/> to a named parameter
            using an NHibernate <see cref="T:NHibernate.Type.ByteType"/>.
            </summary>
            <param name="name">The name of the parameter</param>
            <param name="val">A non-null instance of a <see cref="T:System.Byte"/>.</param>
        </member>
        <member name="M:uNhAddIns.NH.IDetachedQuery.SetCharacter(System.Int32,System.Char)">
            <summary>
            Bind an instance of a <see cref="T:System.Char"/> to an indexed parameter
            using an NHibernate <see cref="T:NHibernate.Type.CharType"/>.
            </summary>
            <param name="position">The position of the parameter in the query string, numbered from <c>0</c></param>
            <param name="val">A non-null instance of a <see cref="T:System.Char"/>.</param>
        </member>
        <member name="M:uNhAddIns.NH.IDetachedQuery.SetCharacter(System.String,System.Char)">
            <summary>
            Bind an instance of a <see cref="T:System.Char"/> to a named parameter
            using an NHibernate <see cref="T:NHibernate.Type.CharType"/>.
            </summary>
            <param name="name">The name of the parameter</param>
            <param name="val">A non-null instance of a <see cref="T:System.Char"/>.</param>
        </member>
        <member name="M:uNhAddIns.NH.IDetachedQuery.SetDateTime(System.Int32,System.DateTime)">
            <summary>
            Bind an instance of a <see cref="T:System.DateTime"/> to an indexed parameter
            using an NHibernate <see cref="T:NHibernate.Type.DateTimeType"/>.
            </summary>
            <param name="position">The position of the parameter in the query string, numbered from <c>0</c></param>
            <param name="val">A non-null instance of a <see cref="T:System.DateTime"/>.</param>
        </member>
        <member name="M:uNhAddIns.NH.IDetachedQuery.SetDateTime(System.String,System.DateTime)">
            <summary>
            Bind an instance of a <see cref="T:System.DateTime"/> to a named parameter
            using an NHibernate <see cref="T:NHibernate.Type.DateTimeType"/>.
            </summary>
            <param name="val">A non-null instance of a <see cref="T:System.DateTime"/>.</param>
            <param name="name">The name of the parameter</param>
        </member>
        <member name="M:uNhAddIns.NH.IDetachedQuery.SetDecimal(System.Int32,System.Decimal)">
            <summary>
            Bind an instance of a <see cref="T:System.Decimal"/> to an indexed parameter
            using an NHibernate <see cref="T:NHibernate.Type.DecimalType"/>.
            </summary>
            <param name="position">The position of the parameter in the query string, numbered from <c>0</c></param>
            <param name="val">A non-null instance of a <see cref="T:System.Decimal"/>.</param>
        </member>
        <member name="M:uNhAddIns.NH.IDetachedQuery.SetDecimal(System.String,System.Decimal)">
            <summary>
            Bind an instance of a <see cref="T:System.Decimal"/> to a named parameter
            using an NHibernate <see cref="T:NHibernate.Type.DecimalType"/>.
            </summary>
            <param name="name">The name of the parameter</param>
            <param name="val">A non-null instance of a <see cref="T:System.Decimal"/>.</param>
        </member>
        <member name="M:uNhAddIns.NH.IDetachedQuery.SetDouble(System.Int32,System.Double)">
            <summary>
            Bind an instance of a <see cref="T:System.Double"/> to an indexed parameter
            using an NHibernate <see cref="T:NHibernate.Type.DoubleType"/>.
            </summary>
            <param name="position">The position of the parameter in the query string, numbered from <c>0</c></param>
            <param name="val">A non-null instance of a <see cref="T:System.Double"/>.</param>
        </member>
        <member name="M:uNhAddIns.NH.IDetachedQuery.SetDouble(System.String,System.Double)">
            <summary>
            Bind an instance of a <see cref="T:System.Double"/> to a named parameter
            using an NHibernate <see cref="T:NHibernate.Type.DoubleType"/>.
            </summary>
            <param name="name">The name of the parameter</param>
            <param name="val">A non-null instance of a <see cref="T:System.Double"/>.</param>
        </member>
        <member name="M:uNhAddIns.NH.IDetachedQuery.SetEntity(System.Int32,System.Object)">
            <summary>
            Bind an instance of a mapped persistent class to an indexed parameter.
            </summary>
            <param name="position">Position of the parameter in the query string, numbered from <c>0</c></param>
            <param name="val">A non-null instance of a persistent class</param>
        </member>
        <member name="M:uNhAddIns.NH.IDetachedQuery.SetEntity(System.String,System.Object)">
            <summary>
            Bind an instance of a mapped persistent class to a named parameter.
            </summary>
            <param name="name">The name of the parameter</param>
            <param name="val">A non-null instance of a persistent class</param>
        </member>
        <member name="M:uNhAddIns.NH.IDetachedQuery.SetEnum(System.Int32,System.Enum)">
            <summary>
            Bind an instance of a persistent enumeration class to an indexed parameter
            using an NHibernate <see cref="T:NHibernate.Type.PersistentEnumType"/>.
            </summary>
            <param name="position">The position of the parameter in the query string, numbered from <c>0</c></param>
            <param name="val">A non-null instance of a persistent enumeration</param>
        </member>
        <member name="M:uNhAddIns.NH.IDetachedQuery.SetEnum(System.String,System.Enum)">
            <summary>
            Bind an instance of a persistent enumeration class to a named parameter
            using an NHibernate <see cref="T:NHibernate.Type.PersistentEnumType"/>.
            </summary>
            <param name="name">The name of the parameter</param>
            <param name="val">A non-null instance of a persistent enumeration</param>
        </member>
        <member name="M:uNhAddIns.NH.IDetachedQuery.SetInt16(System.Int32,System.Int16)">
            <summary>
            Bind an instance of a <see cref="T:System.Int16"/> to an indexed parameter
            using an NHibernate <see cref="T:NHibernate.Type.Int16Type"/>.
            </summary>
            <param name="position">The position of the parameter in the query string, numbered from <c>0</c></param>
            <param name="val">A non-null instance of a <see cref="T:System.Int16"/>.</param>
        </member>
        <member name="M:uNhAddIns.NH.IDetachedQuery.SetInt16(System.String,System.Int16)">
            <summary>
            Bind an instance of a <see cref="T:System.Int16"/> to a named parameter
            using an NHibernate <see cref="T:NHibernate.Type.Int16Type"/>.
            </summary>
            <param name="name">The name of the parameter</param>
            <param name="val">A non-null instance of a <see cref="T:System.Int16"/>.</param>
        </member>
        <member name="M:uNhAddIns.NH.IDetachedQuery.SetInt32(System.Int32,System.Int32)">
            <summary>
            Bind an instance of a <see cref="T:System.Int32"/> to an indexed parameter
            using an NHibernate <see cref="T:NHibernate.Type.Int32Type"/>.
            </summary>
            <param name="position">The position of the parameter in the query string, numbered from <c>0</c></param>
            <param name="val">A non-null instance of a <see cref="T:System.Int32"/>.</param>
        </member>
        <member name="M:uNhAddIns.NH.IDetachedQuery.SetInt32(System.String,System.Int32)">
            <summary>
            Bind an instance of a <see cref="T:System.Int32"/> to a named parameter
            using an NHibernate <see cref="T:NHibernate.Type.Int32Type"/>.
            </summary>
            <param name="name">The name of the parameter</param>
            <param name="val">A non-null instance of a <see cref="T:System.Int32"/>.</param>
        </member>
        <member name="M:uNhAddIns.NH.IDetachedQuery.SetInt64(System.Int32,System.Int64)">
            <summary>
            Bind an instance of a <see cref="T:System.Int64"/> to an indexed parameter
            using an NHibernate <see cref="T:NHibernate.Type.Int64Type"/>.
            </summary>
            <param name="position">The position of the parameter in the query string, numbered from <c>0</c></param>
            <param name="val">A non-null instance of a <see cref="T:System.Int64"/>.</param>
        </member>
        <member name="M:uNhAddIns.NH.IDetachedQuery.SetInt64(System.String,System.Int64)">
            <summary>
            Bind an instance of a <see cref="T:System.Int64"/> to a named parameter
            using an NHibernate <see cref="T:NHibernate.Type.Int64Type"/>.
            </summary>
            <param name="name">The name of the parameter</param>
            <param name="val">A non-null instance of a <see cref="T:System.Int64"/>.</param>
        </member>
        <member name="M:uNhAddIns.NH.IDetachedQuery.SetSingle(System.Int32,System.Single)">
            <summary>
            Bind an instance of a <see cref="T:System.Single"/> to an indexed parameter
            using an NHibernate <see cref="T:NHibernate.Type.SingleType"/>.
            </summary>
            <param name="position">The position of the parameter in the query string, numbered from <c>0</c></param>
            <param name="val">A non-null instance of a <see cref="T:System.Single"/>.</param>
        </member>
        <member name="M:uNhAddIns.NH.IDetachedQuery.SetSingle(System.String,System.Single)">
            <summary>
            Bind an instance of a <see cref="T:System.Single"/> to a named parameter
            using an NHibernate <see cref="T:NHibernate.Type.SingleType"/>.
            </summary>
            <param name="name">The name of the parameter</param>
            <param name="val">A non-null instance of a <see cref="T:System.Single"/>.</param>
        </member>
        <member name="M:uNhAddIns.NH.IDetachedQuery.SetString(System.Int32,System.String)">
            <summary>
            Bind an instance of a <see cref="T:System.String"/> to an indexed parameter
            using an NHibernate <see cref="T:NHibernate.Type.StringType"/>.
            </summary>
            <param name="position">The position of the parameter in the query string, numbered from <c>0</c></param>
            <param name="val">A non-null instance of a <see cref="T:System.String"/>.</param>
        </member>
        <member name="M:uNhAddIns.NH.IDetachedQuery.SetString(System.String,System.String)">
            <summary>
            Bind an instance of a <see cref="T:System.String"/> to a named parameter
            using an NHibernate <see cref="T:NHibernate.Type.StringType"/>.
            </summary>
            <param name="name">The name of the parameter</param>
            <param name="val">A non-null instance of a <see cref="T:System.String"/>.</param>
        </member>
        <member name="M:uNhAddIns.NH.IDetachedQuery.SetTime(System.Int32,System.DateTime)">
            <summary>
            Bind an instance of a <see cref="T:System.DateTime"/> to an indexed parameter
            using an NHibernate <see cref="T:NHibernate.Type.DateTimeType"/>.
            </summary>
            <param name="position">The position of the parameter in the query string, numbered from <c>0</c></param>
            <param name="val">A non-null instance of a <see cref="T:System.DateTime"/>.</param>
        </member>
        <member name="M:uNhAddIns.NH.IDetachedQuery.SetTime(System.String,System.DateTime)">
            <summary>
            Bind an instance of a <see cref="T:System.DateTime"/> to a named parameter
            using an NHibernate <see cref="T:NHibernate.Type.DateTimeType"/>.
            </summary>
            <param name="name">The name of the parameter</param>
            <param name="val">A non-null instance of a <see cref="T:System.DateTime"/>.</param>
        </member>
        <member name="M:uNhAddIns.NH.IDetachedQuery.SetTimestamp(System.Int32,System.DateTime)">
            <summary>
            Bind an instance of a <see cref="T:System.DateTime"/> to an indexed parameter
            using an NHibernate <see cref="T:NHibernate.Type.TimestampType"/>.
            </summary>
            <param name="position">The position of the parameter in the query string, numbered from <c>0</c></param>
            <param name="val">A non-null instance of a <see cref="T:System.DateTime"/>.</param>
        </member>
        <member name="M:uNhAddIns.NH.IDetachedQuery.SetTimestamp(System.String,System.DateTime)">
            <summary>
            Bind an instance of a <see cref="T:System.DateTime"/> to a named parameter
            using an NHibernate <see cref="T:NHibernate.Type.TimestampType"/>.
            </summary>
            <param name="name">The name of the parameter</param>
            <param name="val">A non-null instance of a <see cref="T:System.DateTime"/>.</param>
        </member>
        <member name="M:uNhAddIns.NH.IDetachedQuery.SetGuid(System.Int32,System.Guid)">
            <summary>
            Bind an instance of a <see cref="T:System.Guid"/> to a named parameter
            using an NHibernate <see cref="T:NHibernate.Type.GuidType"/>.
            </summary>
            <param name="position">The position of the parameter in the query string, numbered from <c>0</c></param>
            <param name="val">An instance of a <see cref="T:System.Guid"/>.</param>
        </member>
        <member name="M:uNhAddIns.NH.IDetachedQuery.SetGuid(System.String,System.Guid)">
            <summary>
            Bind an instance of a <see cref="T:System.Guid"/> to a named parameter
            using an NHibernate <see cref="T:NHibernate.Type.GuidType"/>.
            </summary>
            <param name="name">The name of the parameter</param>
            <param name="val">An instance of a <see cref="T:System.Guid"/>.</param>
        </member>
        <member name="M:uNhAddIns.NH.IDetachedQuery.SetFlushMode(NHibernate.FlushMode)">
            <summary>
            Override the current session flush mode, just for this query.
            </summary>
        </member>
        <member name="M:uNhAddIns.NH.IDetachedQuery.SetResultTransformer(NHibernate.Transform.IResultTransformer)">
            <summary>
            Set a strategy for handling the query results. This can be used to change
            "shape" of the query result.
            </summary>
        </member>
        <member name="M:uNhAddIns.NH.IDetachedQuery.SetIgnoreUknownNamedParameters(System.Boolean)">
            <summary>
            Set the value to ignore unknow parameters names.
            </summary>
            <param name="ignoredUnknownNamedParameters">True to ignore unknow parameters names.</param>
        </member>
        <member name="T:uNhAddIns.NH.Impl.IDetachedQueryImplementor">
            <summary>
            Interface for DetachedQuery implementors.
            </summary>
            <remarks>
            When you are working with queries in "detached mode" you may some additional services like clone, 
            copy of parameters from another query and so on.
            </remarks>
        </member>
        <member name="M:uNhAddIns.NH.Impl.IDetachedQueryImplementor.CopyTo(uNhAddIns.NH.IDetachedQuery)">
            <summary>
            Copy all properties to a given <see cref="T:uNhAddIns.NH.IDetachedQuery"/>.
            </summary>
            <param name="destination">The given <see cref="T:uNhAddIns.NH.IDetachedQuery"/>.</param>
            <remarks>
            Usually the implementation use <see cref="T:uNhAddIns.NH.IDetachedQuery"/> to set properties to the <paramref name="destination"/>.
            This mean that existing properties are merged/overriden.
            </remarks>
        </member>
        <member name="M:uNhAddIns.NH.Impl.IDetachedQueryImplementor.SetParametersTo(uNhAddIns.NH.IDetachedQuery)">
            <summary>
            Set only parameters to a given <see cref="T:uNhAddIns.NH.IDetachedQuery"/>.
            </summary>
            <param name="destination">The given <see cref="T:uNhAddIns.NH.IDetachedQuery"/>.</param>
            <remarks>
            Existing parameters are merged/overriden.
            </remarks>
        </member>
        <member name="M:uNhAddIns.NH.Impl.IDetachedQueryImplementor.OverrideInfoFrom(uNhAddIns.NH.Impl.IDetachedQueryImplementor)">
            <summary>
            Override all properties reading new values from a given <see cref="T:uNhAddIns.NH.Impl.IDetachedQueryImplementor"/>.
            </summary>
            <param name="origin">The given origin.</param>
        </member>
        <member name="M:uNhAddIns.NH.Impl.IDetachedQueryImplementor.OverrideParametersFrom(uNhAddIns.NH.Impl.IDetachedQueryImplementor)">
            <summary>
            Override all parameters reading new values from a given <see cref="T:uNhAddIns.NH.Impl.IDetachedQueryImplementor"/>.
            </summary>
            <param name="origin">The given origin.</param>
        </member>
        <member name="M:uNhAddIns.NH.Impl.AbstractDetachedQuery.SetQueryProperties(NHibernate.IQuery)">
            <summary>
            Fill all <see cref="T:NHibernate.IQuery"/> properties.
            </summary>
            <param name="q">The <see cref="T:NHibernate.IQuery"/>.</param>
            <remarks>
            Query properties are overriden/merged.
            </remarks>
        </member>
        <member name="M:uNhAddIns.NH.Impl.AbstractDetachedQuery.CopyTo(uNhAddIns.NH.IDetachedQuery)">
            <summary>
            Copy all properties to a given <see cref="T:uNhAddIns.NH.IDetachedQuery"/>.
            </summary>
            <param name="destination">The given <see cref="T:uNhAddIns.NH.IDetachedQuery"/>.</param>
            <remarks>
            The method use <see cref="T:uNhAddIns.NH.IDetachedQuery"/> to set properties of <paramref name="destination"/>.
            </remarks>
        </member>
        <member name="M:uNhAddIns.NH.Impl.AbstractDetachedQuery.SetParametersTo(uNhAddIns.NH.IDetachedQuery)">
            <summary>
            Set only parameters to a given <see cref="T:uNhAddIns.NH.IDetachedQuery"/>.
            </summary>
            <param name="destination">The given <see cref="T:uNhAddIns.NH.IDetachedQuery"/>.</param>
            <remarks>
            The method use <see cref="T:uNhAddIns.NH.IDetachedQuery"/> to set properties of <paramref name="destination"/>.
            Existing parameters in <paramref name="destination"/> are merged/overriden.
            </remarks>
        </member>
        <member name="M:uNhAddIns.NH.Impl.AbstractDetachedQuery.CopyParametersFrom(uNhAddIns.NH.Impl.IDetachedQueryImplementor)">
            <summary>
            Clear all existing parameters and copy new parameters from a given origin.
            </summary>
            <param name="origin">The origin of parameters.</param>
            <returns>The current instance</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="origin"/> is null.</exception>
        </member>
        <member name="M:uNhAddIns.NH.Impl.DetachedNamedQuery.#ctor(System.String)">
            <summary>
            Create a new instance of <see cref="T:uNhAddIns.NH.Impl.DetachedNamedQuery"/> for a named query string defined in the mapping file.
            </summary>
            <param name="queryName">The name of a query defined externally.</param>
            <remarks>
            The query can be either in HQL or SQL format.
            </remarks>
        </member>
        <member name="M:uNhAddIns.NH.Impl.DetachedNamedQuery.GetExecutableQuery(NHibernate.ISession)">
            <summary>
            Get an executable instance of <see cref="T:NHibernate.IQuery"/>, to actually run the query.
            </summary>
        </member>
        <member name="M:uNhAddIns.NH.Impl.DetachedNamedQuery.Clone">
            <summary>
            Creates a new DetachedNamedQuery that is a deep copy of the current instance.
            </summary>
            <returns>The clone.</returns>
        </member>
        <member name="P:uNhAddIns.NH.Impl.DetachedNamedQuery.QueryName">
            <summary>
            Get the query name.
            </summary>
        </member>
        <member name="T:uNhAddIns.NH.Expression.DetachedCriteria">
            <summary>
            Some applications need to create criteria queries in "detached
            mode", where the Hibernate session is not available. This class
            may be instantiated anywhere, and then a <c>ICriteria</c>
            may be obtained by passing a session to 
            <c>GetExecutableCriteria()</c>. All methods have the
            same semantics and behavior as the corresponding methods of the
            <c>ICriteria</c> interface.
            </summary>
        </member>
        <member name="M:uNhAddIns.NH.Expression.DetachedCriteria.GetExecutableCriteria(NHibernate.ISession)">
            <summary>
            Get an executable instance of <c>Criteria</c>,
            to actually run the query.</summary>
        </member>
        <member name="T:uNhAddIns.Criterions.Criterion">
            <summary>
            Build in criterions.
            </summary>
        </member>
        <member name="M:uNhAddIns.Criterions.Criterion.EqOrNull(System.String,System.Object)">
            <summary>
            Apply an "equal" or "is null" constraint to the named property
            </summary>
            <param name="propertyName">The name of the Property in the class.</param>
            <param name="value">The value for the Property.</param>
            <returns>An <see cref="T:uNhAddIns.Criterions.EqOrNullExpression"/>.</returns>
            <remarks>
            If the <paramref name="value"/> is null the criterion apply the "is null" constraint;
            otherwise apply the "equal" constraint
            </remarks>
            <seealso cref="T:NHibernate.Expression.EqExpression"/>
            <seealso cref="T:NHibernate.Expression.NullExpression"/>
        </member>
        <member name="T:uNhAddIns.Pagination.IPaginable`1">
            <summary>
            Interface for paginable results.
            </summary>
            <typeparam name="T">The type of DAO.</typeparam>
            <remarks>
            The interface was inspired from some where on the NET, but now I can't found it anymore.
            Even if this interface is not the same, if somebody else found it, please let me know.
            </remarks>
        </member>
        <member name="M:uNhAddIns.Pagination.IPaginable`1.GetSession">
            <summary>
            Session getter.
            </summary>
            <returns>The <see cref="T:NHibernate.ISession"/>.</returns>
        </member>
        <member name="M:uNhAddIns.Pagination.IPaginable`1.ListAll">
            <summary>
            All results without paging.
            </summary>
            <returns>The list of all instances.</returns>
        </member>
        <member name="M:uNhAddIns.Pagination.IPaginable`1.GetPage(System.Int32,System.Int32)">
            <summary>
            Page result getter.
            </summary>
            <param name="pageSize">The page's elements quantity.</param>
            <param name="pageNumber">The page number.</param>
            <returns>The page's elements list.</returns>
            <remarks>The max size of the list is <paramref name="pageSize"/>.</remarks>
        </member>
        <member name="M:uNhAddIns.Pagination.AbstractPaginableCriteria`1.GetSession">
            <summary>
            Session getter.
            </summary>
            <returns>The <see cref="T:NHibernate.ISession"/>.</returns>
        </member>
        <member name="M:uNhAddIns.Pagination.AbstractPaginableCriteria`1.ListAll">
            <summary>
            All results without paging.
            </summary>
            <returns>The list of all instances.</returns>
        </member>
        <member name="M:uNhAddIns.Pagination.AbstractPaginableCriteria`1.GetPage(System.Int32,System.Int32)">
            <summary>
            Page result getter.
            </summary>
            <param name="pageSize">The page's elements quantity.</param>
            <param name="pageNumber">The page number.</param>
            <returns>The page's elements list.</returns>
            <remarks>The max size of the list is <paramref name="pageSize"/>.</remarks>
        </member>
        <member name="P:uNhAddIns.Pagination.AbstractPaginableCriteria`1.Criteria">
            <summary>
            Take care <see cref="T:uNhAddIns.NH.Expression.DetachedCriteria"/> is not <see cref="T:NHibernate.Expression.DetachedCriteria"/>.
            The official 1.2.x DetachedCriteria don't ha methods for pagination.
            </summary>
        </member>
        <member name="T:uNhAddIns.Pagination.AbstractRowsCounter">
            <summary>
            
            </summary>
        </member>
        <member name="T:uNhAddIns.Pagination.IRowsCounter">
            <summary>
            Interface for the row counter provider.
            </summary>
        </member>
        <member name="M:uNhAddIns.Pagination.IRowsCounter.GetRowsCount(NHibernate.ISession)">
            <summary>
            Get the row count.
            </summary>
            <param name="session">The <see cref="T:NHibernate.ISession"/>.</param>
            <returns>The row count.</returns>
        </member>
        <member name="M:uNhAddIns.Pagination.AbstractRowsCounter.CopyParametersFrom(uNhAddIns.NH.Impl.DetachedQuery)">
            <summary>
            
            </summary>
            <param name="origin"></param>
            <returns></returns>
        </member>
        <member name="M:uNhAddIns.Pagination.AbstractRowsCounter.CopyParametersFrom(uNhAddIns.NH.Impl.DetachedNamedQuery)">
            <summary>
            
            </summary>
            <param name="origin"></param>
            <returns></returns>
        </member>
        <member name="M:uNhAddIns.Pagination.AbstractRowsCounter.GetRowsCount(NHibernate.ISession)">
            <summary>
            Get the row count.
            </summary>
            <param name="session">The <see cref="T:NHibernate.ISession"/>.</param>
            <returns>The row count.</returns>
        </member>
        <member name="T:uNhAddIns.NH.Impl.DetachedQuery">
            <summary>
            Query in "detached mode" where the NHibernate session is not available.
            </summary>
            <seealso cref="T:NHibernate.IQuery"/>
            <seealso cref="T:uNhAddIns.NH.IDetachedQuery"/>
            <seealso cref="T:uNhAddIns.NH.Impl.AbstractDetachedQuery"/>
        </member>
        <member name="M:uNhAddIns.NH.Impl.DetachedQuery.#ctor(System.String)">
            <summary>
            Create a new instance of <see cref="T:uNhAddIns.NH.Impl.DetachedQuery"/> for the given query string.
            </summary>
            <param name="hql">A hibernate query string</param>
        </member>
        <member name="M:uNhAddIns.NH.Impl.DetachedQuery.GetExecutableQuery(NHibernate.ISession)">
            <summary>
            Get an executable instance of <see cref="T:NHibernate.IQuery"/>, to actually run the query.
            </summary>
        </member>
        <member name="M:uNhAddIns.NH.Impl.DetachedQuery.Clone">
            <summary>
            Creates a new DetachedQuery that is a deep copy of the current instance.
            </summary>
            <returns>The clone.</returns>
        </member>
        <member name="P:uNhAddIns.NH.Impl.DetachedQuery.Hql">
            <summary>
            Get the HQL string.
            </summary>
        </member>
        <member name="T:uNhAddIns.GenericImpl.PaginableCriteria`1">
            <summary>
            Generic implementation of <see cref="T:uNhAddIns.Pagination.IPaginable`1"/> based on <see cref="T:uNhAddIns.NH.Expression.DetachedCriteria"/>.
            </summary>
            <typeparam name="T">The type of DAO.</typeparam>
            <seealso cref="T:uNhAddIns.NH.Expression.DetachedCriteria"/>
        </member>
        <member name="M:uNhAddIns.GenericImpl.PaginableCriteria`1.#ctor(NHibernate.ISession,uNhAddIns.NH.Expression.DetachedCriteria)">
            <summary>
            Create a new instance of <see cref="T:uNhAddIns.GenericImpl.PaginableCriteria`1"/>.
            </summary>
            <param name="session">The session (may be the same session of the DAO).</param>
            <param name="detachedCriteria">The detached criteria.</param>
        </member>
        <member name="T:uNhAddIns.Pagination.Paginator`1">
            <summary>
            Results paginator.
            </summary>
            <typeparam name="T">The type of DAO.</typeparam>
            <seealso cref="T:uNhAddIns.Pagination.IPaginator"/>
            <seealso cref="T:uNhAddIns.Pagination.BasePaginator"/>
            <seealso cref="T:uNhAddIns.Pagination.IPageProvider`1"/>
        </member>
        <member name="T:uNhAddIns.Pagination.BasePaginator">
            <summary>
            General purpose paginator.
            </summary>
            <remarks>
            It can be useful if you think to hold the state of pagination in some kind of cache.
            </remarks>
        </member>
        <member name="M:uNhAddIns.Pagination.BasePaginator.#ctor(System.Int32)">
            <summary>
            Create a new instance of <see cref="T:uNhAddIns.Pagination.BasePaginator"/>.
            </summary>
            <param name="lastPageNumber">The las available page.</param>
            <remarks>
            The <see cref="P:uNhAddIns.Pagination.BasePaginator.CurrentPageNumber"/> is set to the first available page.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="lastPageNumber"/> is less than zero.</exception>
        </member>
        <member name="M:uNhAddIns.Pagination.BasePaginator.GotoPageNumber(System.Int32)">
            <summary>
            Move the curret page to a given page number.
            </summary>
            <param name="pageNumber">The page number.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When the <paramref name="pageNumber"/> is great
            then <see cref="P:uNhAddIns.Pagination.BasePaginator.LastPageNumber"/>.
            </exception>
        </member>
        <member name="P:uNhAddIns.Pagination.BasePaginator.CurrentPageNumber">
            <summary>
            The number of the current page.
            </summary>
        </member>
        <member name="P:uNhAddIns.Pagination.BasePaginator.LastPageNumber">
            <summary>
            The number of the last page.
            </summary>
        </member>
        <member name="P:uNhAddIns.Pagination.BasePaginator.NextPageNumber">
            <summary>
            The number of the next page.
            </summary>
        </member>
        <member name="P:uNhAddIns.Pagination.BasePaginator.PreviousPageNumber">
            <summary>
            The number of the previous page.
            </summary>
        </member>
        <member name="P:uNhAddIns.Pagination.BasePaginator.FirstPageNumber">
            <summary>
            The number of the first page.
            </summary>
        </member>
        <member name="P:uNhAddIns.Pagination.BasePaginator.HasPrevious">
            <summary>
            True if has a previous page; false otherwise.
            </summary>
        </member>
        <member name="P:uNhAddIns.Pagination.BasePaginator.HasNext">
            <summary>
            True if has a next page; false otherwise.
            </summary>
        </member>
        <member name="M:uNhAddIns.Pagination.Paginator`1.#ctor(System.Int32,uNhAddIns.Pagination.IPaginable{`0})">
            <summary>
            Create a new instance of <see cref="T:uNhAddIns.Pagination.Paginator`1"/>.
            </summary>
            <param name="pageSize">The page's elements quantity.</param>
            <param name="paginable">The paginable DAO.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="paginable"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="pageSize"/> equal or less than zero.</exception>
            <remarks>
            If the <paramref name="paginable"/> implements <see cref="T:uNhAddIns.Pagination.IRowsCounter"/> the <see cref="P:uNhAddIns.Pagination.Paginator`1.Counter"/> 
            property is set and the paginator work in "AutoCalcPages mode".
            </remarks>
        </member>
        <member name="M:uNhAddIns.Pagination.Paginator`1.#ctor(System.Int32,uNhAddIns.Pagination.IPaginable{`0},System.Boolean)">
            <summary>
            Create a new instance of <see cref="T:uNhAddIns.Pagination.Paginator`1"/>.
            </summary>
            <param name="pageSize">The page's elements quantity.</param>
            <param name="paginable">The paginable DAO.</param>
            <param name="autoCalcPages">Enable or disable the "AutoCalcPages mode"; for more detail <see cref="P:uNhAddIns.Pagination.Paginator`1.AutoCalcPages"/>.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="paginable"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="pageSize"/> equal or less than zero.</exception>
        </member>
        <member name="M:uNhAddIns.Pagination.Paginator`1.#ctor(System.Int32,uNhAddIns.Pagination.IPaginable{`0},uNhAddIns.Pagination.IRowsCounter)">
            <summary>
            Create a new instance of <see cref="T:uNhAddIns.Pagination.Paginator`1"/>.
            </summary>
            <param name="pageSize">The page's elements quantity.</param>
            <param name="paginable">The paginable DAO.</param>
            <param name="counter">The rows counter.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="paginable"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="pageSize"/> equal or less than zero.</exception>
            <remarks> 
            If <paramref name="counter"/> is null it is simply ignored.
            If <paramref name="counter"/> is available the paginator work with "AutoCalcPages mode" enabled.
            <para>
            Paginator don't make any check about queries. 
            This mean, for example, that the resposablity to check if the <paramref name="counter"/> query 
            work according the <paramref name="paginable"/> query is a responsability of the paginator user.
            Write your tests to be secure.
            </para>
            </remarks>
        </member>
        <member name="M:uNhAddIns.Pagination.Paginator`1.GetPage(System.Int32)">
            <summary>
            Get the list of objects for a given page number and move the current page.
            </summary>
            <param name="pageNumber">The page number.</param>
            <returns>The list of objects.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:uNhAddIns.Pagination.Paginator`1.GetFirstPage">
            <summary>
            Get the list of objects of the first page and move the current page.
            </summary>
            <returns>The list of objects.</returns>
        </member>
        <member name="M:uNhAddIns.Pagination.Paginator`1.GetLastPage">
            <summary>
            Get the list of objects of the last page and move the current page.
            </summary>
            <returns>The list of objects.</returns>
            <exception cref="T:System.NotSupportedException">When <see cref="P:uNhAddIns.Pagination.Paginator`1.AutoCalcPages"/> is false</exception>
        </member>
        <member name="M:uNhAddIns.Pagination.Paginator`1.GetNextPage">
            <summary>
            Get the list of objects of the next page and move the current page.
            </summary>
            <returns>The list of objects.</returns>
        </member>
        <member name="M:uNhAddIns.Pagination.Paginator`1.GetPreviousPage">
            <summary>
            Get the list of objects of the previous page and move the current page.
            </summary>
            <returns>The list of objects.</returns>
        </member>
        <member name="M:uNhAddIns.Pagination.Paginator`1.GetCurrentPage">
            <summary>
            Get the list of objects of the current page.
            </summary>
            <returns>The list of objects.</returns>
            <exception cref="T:System.NotSupportedException">When the current page is not available.</exception>
        </member>
        <member name="M:uNhAddIns.Pagination.Paginator`1.GotoPageNumber(System.Int32)">
            <summary>
            Move the current page to a given page number.
            </summary>
            <param name="pageNumber">The page number.</param>
        </member>
        <member name="P:uNhAddIns.Pagination.Paginator`1.AutoCalcPages">
            <summary>
            State of "AutoCalcPages mode".
            </summary>
            <remarks>
            Default = false.
            "AutoCalcPages mode" is enabled automatically when a <see cref="P:uNhAddIns.Pagination.Paginator`1.Counter"/> is available.
            If <see cref="P:uNhAddIns.Pagination.Paginator`1.Counter"/> is null and "AutoCalcPages mode" is enabled the paginator use 
            the <see cref="M:uNhAddIns.Pagination.IPaginable`1.ListAll"/> to know the amount of availables pages.
            <para>
            Be carefully enabling "AutoCalcPages mode" because the first time you try to get
            <see cref="P:uNhAddIns.Pagination.Paginator`1.LastPageNumber"/> or <see cref="P:uNhAddIns.Pagination.Paginator`1.RowsCount"/> the paginator automatically
            fecth all DAO of the entity only to know the value to return.
            The "AutoCalcPages mode" can be useful if you are secure that you don't retrieve many entities AND
            you are using lazy-loading.
            </para>
            The best practice is: use the constructor with <see cref="T:uNhAddIns.Pagination.IRowsCounter"/>.
            </remarks>
        </member>
        <member name="P:uNhAddIns.Pagination.Paginator`1.Counter">
            <summary>
            The <see cref="T:uNhAddIns.Pagination.IRowsCounter"/> settled by constructor.
            </summary>
        </member>
        <member name="P:uNhAddIns.Pagination.Paginator`1.PageSize">
            <summary>
            Number of visible objects of each page.
            </summary>
            <remarks>Change PageSize mean reset the <see cref="P:uNhAddIns.Pagination.Paginator`1.RowsCount"/>.</remarks>
        </member>
        <member name="P:uNhAddIns.Pagination.Paginator`1.RowsCount">
            <summary>
            The total rows count.
            </summary>
            <remarks>Return null if rows count is not available.</remarks>
        </member>
        <member name="P:uNhAddIns.Pagination.Paginator`1.HasPages">
            <summary>
            Get True if the paginator has query results. False in other case.
            </summary>
        </member>
        <member name="P:uNhAddIns.Pagination.Paginator`1.LastPageNumber">
            <summary>
            The number of the last page if available; otherwise null.
            </summary>
        </member>
        <member name="M:uNhAddIns.Pagination.AbstractPaginableRowsCounterQuery`1.GetRowsCount(NHibernate.ISession)">
            <summary>
            Get the row count.
            </summary>
            <param name="session">The <see cref="T:NHibernate.ISession"/>.</param>
            <returns>The row count.</returns>
        </member>
        <member name="P:uNhAddIns.DynQuery.LogicalExpression.Clause">
            <summary>
            The query complete clause.
            </summary>
        </member>
        <member name="P:uNhAddIns.DynQuery.LogicalExpression.Expression">
            <summary>
            The query part.
            </summary>
        </member>
        <member name="T:uNhAddIns.Serialization.Cloner">
            <summary>
            Helper to clone objects using Serialization.
            </summary>
        </member>
        <member name="M:uNhAddIns.Serialization.Cloner.Clone(System.Object)">
            <summary>
            Clone a object via Binary Serializing/Deserializing.
            The object to clone must have the attribute [Serializable]
            <example>
            Here it's an example to make a simple object clone:
            <code>
            Foo foo = new Foo();
            Foo clonedFoo = (Foo)Cloner.Clone(foo);  
            </code>
            Then the class Foo in order to work must implement [Serializable]
            <code>
            [Serializable]
            public class Foo
            {
             ...
            } 
            </code>
            </example>
            <seealso cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter"/>
            </summary>
            <param name="obj">Object to clone</param>
            <returns>Clone object</returns>
        </member>
        <member name="M:uNhAddIns.Serialization.Cloner.Clone(System.Object,System.Runtime.Serialization.IFormatter)">
            <summary>
            Clone a object with via Serializing/Deserializing
            using a implementation of IFormatter. 
            <seealso cref="T:System.Runtime.Serialization.IFormatter"/> 
            </summary>
            <param name="obj">Object to clone</param>
            <param name="formatter">IFormatter implementation in order to Serialize/Deserialize</param>
            <returns>Clone object</returns>
        </member>
        <member name="T:uNhAddIns.Pagination.NamedQueryRowsCounter">
            <summary>
            
            </summary>
        </member>
        <member name="M:uNhAddIns.Pagination.NamedQueryRowsCounter.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="queryRowsCount"></param>
        </member>
        <member name="T:uNhAddIns.GenericImpl.PaginableRowsCounterQuery`1">
            <summary>
            Generic implementation of <see cref="T:uNhAddIns.Pagination.IPaginable`1"/> and <see cref="T:uNhAddIns.Pagination.IRowsCounter"/> 
            based on <see cref="T:uNhAddIns.NH.Impl.DetachedQuery"/>.
            </summary>
            <typeparam name="T">The type of DAO.</typeparam>
            <seealso cref="T:uNhAddIns.NH.Impl.DetachedQuery"/>
            <remarks>
            Use this class only if you are secure that the DetachedQuery is based on a HQL that can be trasformed
            to it's row count.
            An HQL is supported if contain only 'from' clause and/or 'where' clause.
            Any other clause throw an exception.
            </remarks>
        </member>
        <member name="T:uNhAddIns.DynQuery.From">
            <summary>
            The class that represent the "from" clause of a HQL/SQL.
            </summary>
            <remarks>
            The syntax is cheked when the HQL/SQL will be parsed.
            </remarks>
        </member>
        <member name="M:uNhAddIns.DynQuery.From.#ctor(System.String)">
            <summary>
            Create a new instance of <see cref="T:uNhAddIns.DynQuery.From"/>.
            </summary>
            <param name="partialClause">The "from" clause, of the query, without the "from" word.</param>
        </member>
        <member name="P:uNhAddIns.DynQuery.From.Clause">
            <summary>
            The query clause.
            </summary>
        </member>
        <member name="P:uNhAddIns.DynQuery.From.Expression">
            <summary>
            The query part.
            </summary>
        </member>
        <member name="P:uNhAddIns.DynQuery.From.HasMembers">
            <summary>
            The clause has some meber or not?
            </summary>
        </member>
        <member name="T:uNhAddIns.DynQuery.OrderBy">
            <summary>
            The class that represent the "order by" clause of a HQL/SQL.
            </summary>
            <remarks>
            The syntax is cheked when the HQL/SQL will be parsed.
            </remarks>
        </member>
        <member name="M:uNhAddIns.DynQuery.OrderBy.Add(System.String,System.Boolean)">
            <summary>
            Add a property path to the "order by" clause.
            </summary>
            <param name="propertyPath">The property path (ex: f.Name).</param>
            <param name="isDescending">True if the direction is DESCENDING.</param>
            <returns>The <see cref="T:uNhAddIns.DynQuery.OrderBy"/> it self.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="propertyPath"/> is null or empty.</exception>
        </member>
        <member name="M:uNhAddIns.DynQuery.OrderBy.Add(System.String)">
            <summary>
            Add a property path to the order by clause.
            </summary>
            <param name="propertyPath">The property path (ex: f.Name).</param>
            <returns>The <see cref="T:uNhAddIns.DynQuery.OrderBy"/> it self.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="propertyPath"/> is null or empty.</exception>
        </member>
        <member name="P:uNhAddIns.DynQuery.OrderBy.Clause">
            <summary>
            The query clause.
            </summary>
        </member>
        <member name="P:uNhAddIns.DynQuery.OrderBy.Expression">
            <summary>
            The query part.
            </summary>
        </member>
        <member name="P:uNhAddIns.DynQuery.OrderBy.HasMembers">
            <summary>
            The clause has some meber or not?
            </summary>
        </member>
        <member name="T:uNhAddIns.Pagination.QueryRowsCounter">
            <summary>
            
            </summary>
        </member>
        <member name="M:uNhAddIns.Pagination.QueryRowsCounter.#ctor(System.String)">
            <summary>
            Create a new instance of <see cref="T:uNhAddIns.Pagination.QueryRowsCounter"/>.
            </summary>
            <param name="hqlRowsCount">The HQL.</param>
            <remarks>
            If the query is invalid an exception is throw only when <see cref="M:uNhAddIns.Pagination.IRowsCounter.GetRowsCount(NHibernate.ISession)"/>
            is called.
            </remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="hqlRowsCount"/> is null or empty.</exception>
        </member>
        <member name="M:uNhAddIns.Pagination.QueryRowsCounter.Transforming(uNhAddIns.NH.Impl.DetachedQuery)">
            <summary>
            Transform an gigen <see cref="T:uNhAddIns.NH.Impl.DetachedQuery"/> (HQL query) to it's rows count.
            </summary>
            <param name="query">The given <see cref="T:uNhAddIns.NH.Impl.DetachedQuery"/>.</param>
            <returns>
            A <see cref="T:uNhAddIns.Pagination.QueryRowsCounter"/> based on <paramref name="query"/>, with row count, using
            same parameters and it's values.
            </returns>
            <exception cref="T:NHibernate.HibernateException">When the query don't start with 'from' clause.</exception>
            <remarks>
            Take care to the query; it can't contain any other clause than "from" and "where".
            Set the parameters and it's values, of <paramref name="query"/> befor call this method.
            </remarks>
        </member>
        <member name="M:uNhAddIns.Pagination.QueryRowsCounter.#ctor(uNhAddIns.NH.IDetachedQuery)">
            <summary>
            Create a new instance of <see cref="T:uNhAddIns.Pagination.QueryRowsCounter"/>.
            </summary>
            <param name="queryRowCount">The query.</param>
            <remarks>
            If the query is invalid an exception is throw only when <see cref="M:uNhAddIns.Pagination.IRowsCounter.GetRowsCount(NHibernate.ISession)"/>
            is called.
            </remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="queryRowCount"/> is null.</exception>
        </member>
        <member name="M:uNhAddIns.DynQuery.DetachedDynQuery.GetExecutableQuery(NHibernate.ISession)">
            <summary>
            Get an executable instance of <see cref="T:NHibernate.IQuery"/>, to actually run the query.
            </summary>
        </member>
        <member name="T:uNHAddIns.UserTypes.UpperString">
            <summary>
            Convert the String to Upper when the object it's saved
            or when you get it from the base.
            </summary>
        </member>
        <member name="M:uNHAddIns.UserTypes.UpperString.NullSafeGet(System.Data.IDataReader,System.String[],System.Object)">
            <summary>
            Retrieve an instance of the mapped class from a Ado.Net resultset. 
            Implementors should handle possibility of null values. 
            </summary>
            <param name="rs"></param>
            <param name="names"></param>
            <param name="owner"></param>
            <returns></returns>
        </member>
        <member name="M:uNHAddIns.UserTypes.UpperString.NullSafeSet(System.Data.IDbCommand,System.Object,System.Int32)">
            <summary>
            Write an instance of the mapped class to a prepared statement. 
            Handle possibility of null values. 
            A multi-column type should be written to parameters starting from index. 
            </summary>
            <param name="cmd"></param>
            <param name="value"></param>
            <param name="index"></param>
        </member>
        <member name="M:uNHAddIns.UserTypes.UpperString.DeepCopy(System.Object)">
            <summary>
            Return a deep copy of the persistent state, 
            stopping at entities and at collections. 
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:uNHAddIns.UserTypes.UpperString.Replace(System.Object,System.Object,System.Object)">
            <summary>
            During merge, replace the existing (target) value in the entity we are 
            merging to with a new (original) value from the detached entity we are 
            merging. For immutable objects, or null values, it is safe to simply 
            return the first parameter. For mutable objects, it is safe to return a 
            copy of the first parameter. For objects with component values, it might 
            make sense to recursively replace component values. 
            </summary>
            <param name="original">the value from the detached entity being merged</param>
            <param name="target">the value in the managed entity</param>
            <param name="owner">the managed entity</param>
            <returns>Returns the first parameter because it is inmutable</returns>
        </member>
        <member name="M:uNHAddIns.UserTypes.UpperString.Assemble(System.Object,System.Object)">
            <summary>
            Reconstruct an object from the cacheable representation. 
            At the very least this method should perform a deep copy if the type is mutable. 
            (optional operation) 
            </summary>
            <param name="cached">the object to be cached</param>
            <param name="owner">the owner of the cached object</param>
            <returns>a reconstructed string from the cachable representation</returns>
        </member>
        <member name="M:uNHAddIns.UserTypes.UpperString.Disassemble(System.Object)">
            <summary>
            Transform the object into its cacheable representation. 
            At the very least this method should perform a deep copy if the type is mutable. 
            That may not be enough for some implementations, however; 
            for example, associations must be cached as identifier values. 
            (optional operation) 
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:uNHAddIns.UserTypes.UpperString.Equals(System.Object,System.Object)">
            <summary>
            Compare two <see cref="T:System.String"/>
            </summary>
            <param name="x">string to compare 1</param>
            <param name="y">string to compare 2</param>
            <returns>If are equals or not</returns>
        </member>
        <member name="M:uNHAddIns.UserTypes.UpperString.GetHashCode(System.Object)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="P:uNHAddIns.UserTypes.UpperString.SqlTypes">
            <summary>
            The SQL types for the columns mapped by this type. 
            In this case just a SQL Type will be returned:<seealso cref="F:System.Data.DbType.String"/>
            </summary>
        </member>
        <member name="P:uNHAddIns.UserTypes.UpperString.ReturnedType">
            <summary>
            The returned type is a <see cref="T:System.String"/>
            </summary>
        </member>
        <member name="P:uNHAddIns.UserTypes.UpperString.IsMutable">
            <summary>
            The strings are not mutables.
            </summary>
        </member>
        <member name="T:uNhAddIns.GenericImpl.PaginableQuery`1">
            <summary>
            Generic implementation of <see cref="T:uNhAddIns.Pagination.IPaginable`1"/> based on <see cref="T:uNhAddIns.NH.IDetachedQuery"/>.
            </summary>
            <typeparam name="T">The type of DAO.</typeparam>
            <seealso cref="T:uNhAddIns.NH.IDetachedQuery"/>
            <seealso cref="T:uNhAddIns.NH.Impl.DetachedQuery"/>
            <seealso cref="T:uNhAddIns.NH.Impl.DetachedNamedQuery"/>
        </member>
        <member name="M:uNhAddIns.GenericImpl.PaginableQuery`1.#ctor(NHibernate.ISession,uNhAddIns.NH.IDetachedQuery)">
            <summary>
            Create a new instance of <see cref="T:uNhAddIns.GenericImpl.PaginableQuery`1"/>.
            </summary>
            <param name="session">The session (may be the same session of the DAO).</param>
            <param name="detachedQuery">The detached query.</param>
        </member>
        <member name="T:uNhAddIns.DynQuery.Select">
            <summary>
            The class that represent the "select" clause of a HQL/SQL.
            </summary>
            <remarks>
            The syntax is cheked when the HQL/SQL will be parsed.
            </remarks>
        </member>
        <member name="M:uNhAddIns.DynQuery.Select.#ctor(System.String)">
            <summary>
            Create a new instance of <see cref="T:uNhAddIns.DynQuery.Select"/>.
            </summary>
            <param name="partialClause">
            The "select" clause, of the query, without the "select" word.
            </param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="partialClause"/> is null or empty.</exception>
        </member>
        <member name="M:uNhAddIns.DynQuery.Select.Distinct(System.String)">
            <summary>
            Create a new instance of <see cref="T:uNhAddIns.DynQuery.Select"/>.
            </summary>
            <param name="partialClause">
            The "select" clause, of the query, without the "select distinct" words.
            </param>
            <returns>A new instance of <see cref="T:uNhAddIns.DynQuery.Select"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="partialClause"/> is null or empty.</exception>
        </member>
        <member name="P:uNhAddIns.DynQuery.Select.Clause">
            <summary>
            The query clause.
            </summary>
        </member>
        <member name="P:uNhAddIns.DynQuery.Select.Expression">
            <summary>
            The query part.
            </summary>
        </member>
        <member name="P:uNhAddIns.DynQuery.Select.HasMembers">
            <summary>
            The clause has some meber or not?
            </summary>
        </member>
    </members>
</doc>
