<?xml version="1.0"?>
<doc>
    <assembly>
        <name>uNhAddIns.ActiveRecord</name>
    </assembly>
    <members>
        <member name="T:uNhAddIns.ActiveRecord.ActiveRecordValidationBase`1">
            <summary>
            Extends <see cref="T:uNhAddIns.ActiveRecord.ActiveRecordBase"/> adding automatic validation support.
            <seealso cref="M:uNhAddIns.ActiveRecord.ActiveRecordValidationBase.IsValid"/>
            </summary>
            <example>
            <code>
            public class Customer : ActiveRecordBase
            {
            	...
            	
            	[Property, ValidateNotEmpty]
            	public int Name
            	{
            		get { return _name; }
            		set { _name = value; }
            	}
            	
            	[Property, ValidateNotEmpty, ValidateEmail]
            	public int Email
            	{
            		get { return _email; }
            		set { _email = value; }
            	}
            </code>
            </example>
        </member>
        <member name="T:uNhAddIns.ActiveRecord.ActiveRecordBase`1">
            <summary>
            Base class for all ActiveRecord Generic classes. 
            Implements all the functionality to simplify the code on the subclasses.
            Provide search methods with detached queries support.
            </summary>
            <typeparam name="T">The type of the entity</typeparam>
        </member>
        <member name="M:uNhAddIns.ActiveRecord.ActiveRecordBase`1.FindAll(uNhAddIns.NH.IDetachedQuery)">
            <summary>
            Returns all instances found for the specified type according to the criteria
            </summary>
            <param name="detachedQuery">The query expression.</param>
            <returns>All entities that match the query</returns>
        </member>
        <member name="M:uNhAddIns.ActiveRecord.ActiveRecordBase`1.FindOne(uNhAddIns.NH.IDetachedQuery)">
            <summary>
            Searches and returns a row. If more than one is found, 
            throws <see cref="T:Castle.ActiveRecord.Framework.ActiveRecordException"/>
            <param name="detachedQuery">The query expression</param>
            </summary>
            <returns>A <c>targetType</c> instance or <c>null</c></returns>
        </member>
        <member name="M:uNhAddIns.ActiveRecord.ActiveRecordBase`1.SlicedFindAll(System.Int32,System.Int32,uNhAddIns.NH.IDetachedQuery)">
            <summary>
            Returns a portion of the query results (sliced)
            </summary>
            <param name="firstResult">The number of the first row to retrieve.</param>
            <param name="maxResults">The maximum number of results retrieved.</param>
            <returns>The sliced query results.</returns>
            <param name="detachedQuery">The query expression</param>
        </member>
        <member name="M:uNhAddIns.ActiveRecord.ActiveRecordBase`1.FindFirst(uNhAddIns.NH.IDetachedQuery)">
            <summary>
            Searches and returns the first row. 
            </summary>
            <param name="detachedQuery">The query expression</param>
            <returns>A <c>targetType</c> instance or <c>null.</c></returns>
        </member>
        <member name="M:uNhAddIns.ActiveRecord.ActiveRecordBase`1.Exists(uNhAddIns.NH.IDetachedQuery)">
            <summary>
            Check if any instance matching the query exists in the database.
            </summary>
            <param name="detachedQuery">The query expression</param>
            <returns>true if an instance is found; otherwise false.</returns>
        </member>
        <member name="M:uNhAddIns.ActiveRecord.ActiveRecordValidationBase`1.#ctor">
            <summary>
            Constructs an ActiveRecordValidationBase
            </summary>
        </member>
        <member name="M:uNhAddIns.ActiveRecord.ActiveRecordValidationBase`1.IsValid">
            <summary>
            Performs the fields validation. Returns true if no 
            validation error was found.
            </summary>
            <returns></returns>
        </member>
        <member name="M:uNhAddIns.ActiveRecord.ActiveRecordValidationBase`1.IsValid(Castle.Components.Validator.RunWhen)">
            <summary>
            Performs the fields validation for the specified action.
            </summary>
            <param name="runWhen">Use validators appropriate to the action being performed.</param>
            <returns>True if no validation error was found</returns>
        </member>
        <member name="M:uNhAddIns.ActiveRecord.ActiveRecordValidationBase`1.BeforeSave(System.Collections.IDictionary)">
            <summary>
            Override the base hook to call validators required for create.
            </summary>
            <param name="state">The current state of the object</param>
            <returns>Returns true if the state has changed otherwise false</returns>
        </member>
        <member name="M:uNhAddIns.ActiveRecord.ActiveRecordValidationBase`1.OnFlushDirty(System.Object,System.Collections.IDictionary,System.Collections.IDictionary,NHibernate.Type.IType[])">
            <summary>
            Override the base hook to call validators required for update.
            </summary>
            <param name="id">object id</param>
            <param name="previousState">The previous state of the object</param>
            <param name="currentState">The current state of the object</param>
            <param name="types">Property types</param>
            <returns>Returns true if the state has changed otherwise false</returns>
        </member>
        <member name="M:uNhAddIns.ActiveRecord.ActiveRecordValidationBase`1.OnNotValid">
            <summary>
            Throws an exception explaining why the save or update
            cannot be executed when fields are not ok to pass.
            </summary>
            <remarks>
            You can override this method to declare a better behavior.
            </remarks>
        </member>
        <member name="P:uNhAddIns.ActiveRecord.ActiveRecordValidationBase`1.ValidationErrorMessages">
            <summary>
            Returns a list of current validation errors messages.
            </summary>
        </member>
        <member name="P:uNhAddIns.ActiveRecord.ActiveRecordValidationBase`1.PropertiesValidationErrorMessage">
            <summary>
            Maps a specific PropertyInfo to a list of
            error messages. Useful for frameworks.
            </summary>
        </member>
        <member name="T:uNhAddIns.ActiveRecord.ActiveRecordBase">
            <summary>
            Base class for all ActiveRecord classes. Implements 
            all the functionality to simplify the code on the 
            subclasses.
            </summary>
        </member>
        <member name="M:uNhAddIns.ActiveRecord.ActiveRecordBase.FindAll(System.Type,uNhAddIns.NH.IDetachedQuery)">
            <summary>
            Returns all instances found for the specified type according to the criteria
            </summary>
            <param name="targetType">The target type.</param>
            <param name="detachedQuery">The query expression</param>
            <returns>The <see cref="T:System.Array"/> of results.</returns>
        </member>
        <member name="M:uNhAddIns.ActiveRecord.ActiveRecordBase.SlicedFindAll(System.Type,System.Int32,System.Int32,uNhAddIns.NH.IDetachedQuery)">
            <summary>
            Returns a portion of the query results (sliced)
            </summary>
            <param name="targetType">The target type.</param>
            <param name="firstResult">The number of the first row to retrieve.</param>
            <param name="maxResults">The maximum number of results retrieved.</param>
            <param name="detachedQuery">The query expression</param>
            <returns>The sliced query results.</returns>
        </member>
        <member name="M:uNhAddIns.ActiveRecord.ActiveRecordBase.FindOne(System.Type,uNhAddIns.NH.IDetachedQuery)">
            <summary>
            Searches and returns a row. If more than one is found, 
            throws <see cref="T:Castle.ActiveRecord.Framework.ActiveRecordException"/>
            </summary>
            <param name="targetType">The target type</param>
            <param name="detachedQuery">The query expression</param>
            <returns>A <c>targetType</c> instance or <c>null</c></returns>
        </member>
        <member name="M:uNhAddIns.ActiveRecord.ActiveRecordBase.FindFirst(System.Type,uNhAddIns.NH.IDetachedQuery)">
            <summary>
            Searches and returns the first row.
            </summary>
            <param name="targetType">The target type.</param>
            <param name="detachedQuery">The expression query.</param>
            <returns>A <c>targetType</c> instance or <c>null.</c></returns>
        </member>
        <member name="M:uNhAddIns.ActiveRecord.ActiveRecordBase.Exists(System.Type,uNhAddIns.NH.IDetachedQuery)">
            <summary>
            Check if there is any records in the db for the target type
            </summary>
            <param name="targetType">The target type.</param>
            <param name="detachedQuery"></param>
            <returns><c>true</c> if there's at least one row</returns>
        </member>
        <member name="T:uNhAddIns.ActiveRecord.ActiveRecordValidationBase">
            <summary>
            Extends <see cref="T:uNhAddIns.ActiveRecord.ActiveRecordBase"/> adding automatic validation support.
            </summary>
            <example>
            <code>
            using Castle.Components.Validator;
            
            public class Customer : ActiveRecordBase
            {
            	...
            	
            	[Property, ValidateNonEmpty]
            	public int Name
            	{
            		get { return _name; }
            		set { _name = value; }
            	}
            	
            	[Property, ValidateNonEmpty, ValidateEmail]
            	public int Email
            	{
            		get { return _email; }
            		set { _email = value; }
            	}
            </code>
            </example>   
        </member>
        <member name="M:uNhAddIns.ActiveRecord.ActiveRecordValidationBase.#ctor">
            <summary>
            Constructs an ActiveRecordValidationBase
            </summary>
        </member>
        <member name="M:uNhAddIns.ActiveRecord.ActiveRecordValidationBase.IsValid">
            <summary>
            Performs the fields validation. Returns true if no 
            validation error was found.
            </summary>
            <returns></returns>
        </member>
        <member name="M:uNhAddIns.ActiveRecord.ActiveRecordValidationBase.IsValid(Castle.Components.Validator.RunWhen)">
            <summary>
            Performs the fields validation for the specified action.
            </summary>
            <param name="runWhen">Use validators appropriate to the action being performed.</param>
            <returns>True if no validation error was found</returns>
        </member>
        <member name="M:uNhAddIns.ActiveRecord.ActiveRecordValidationBase.BeforeSave(System.Collections.IDictionary)">
            <summary>
            Override the base hook to call validators required for create.
            </summary>
            <param name="state">The current state of the object</param>
            <returns>Returns true if the state has changed otherwise false</returns>
        </member>
        <member name="M:uNhAddIns.ActiveRecord.ActiveRecordValidationBase.OnFlushDirty(System.Object,System.Collections.IDictionary,System.Collections.IDictionary,NHibernate.Type.IType[])">
            <summary>
            Override the base hook to call validators required for update.
            </summary>
            <param name="id">object id</param>
            <param name="previousState">The previous state of the object</param>
            <param name="currentState">The current state of the object</param>
            <param name="types">Property types</param>
            <returns>Returns true if the state has changed otherwise false</returns>
        </member>
        <member name="M:uNhAddIns.ActiveRecord.ActiveRecordValidationBase.OnNotValid">
            <summary>
            Throws an exception explaining why the save or update
            cannot be executed when fields are not ok to pass.
            </summary>
            <remarks>
            You can override this method to declare a better behavior.
            </remarks>
        </member>
        <member name="P:uNhAddIns.ActiveRecord.ActiveRecordValidationBase.ValidationErrorMessages">
            <summary>
            Returns a list of current validation errors messages.
            </summary>
        </member>
        <member name="P:uNhAddIns.ActiveRecord.ActiveRecordValidationBase.PropertiesValidationErrorMessage">
            <summary>
            Maps a specific PropertyInfo to a list of
            error messages. Useful for frameworks.
            </summary>
        </member>
        <member name="T:uNhAddIns.ActiveRecord.ActiveRecordMediator">
            <summary>
            Allow programmers to use the 
            ActiveRecord functionality without direct reference
            to <see cref="T:uNhAddIns.ActiveRecord.ActiveRecordBase"/>
            </summary>
        </member>
        <member name="M:uNhAddIns.ActiveRecord.ActiveRecordMediator.Exists(System.Type,uNhAddIns.NH.IDetachedQuery)">
            <summary>
            Check if any instance matches the query.
            </summary>
            <param name="targetType">target Type</param>
            <param name="detachedQuery">The query expression</param>
            <returns><c>true</c> if an instance is found; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:uNhAddIns.ActiveRecord.ActiveRecordMediator.FindAll(System.Type,uNhAddIns.NH.IDetachedQuery)">
            <summary>
            Returns all instances found for the specified type according to the criteria
            </summary>
            <param name="targetType">The target type.</param>
            <param name="detachedQuery">The query expression</param>
            <returns>The <see cref="T:System.Array"/> of results.</returns>
        </member>
        <member name="M:uNhAddIns.ActiveRecord.ActiveRecordMediator.FindFirst(System.Type,uNhAddIns.NH.IDetachedQuery)">
            <summary>
            Searches and returns the first row.
            </summary>
            <param name="targetType">The target type.</param>
            <param name="detachedQuery">The expression query.</param>
            <returns>A <c>targetType</c> instance or <c>null.</c></returns>
        </member>
        <member name="M:uNhAddIns.ActiveRecord.ActiveRecordMediator.FindOne(System.Type,uNhAddIns.NH.IDetachedQuery)">
            <summary>
            Searches and returns a row. If more than one is found, 
            throws <see cref="T:Castle.ActiveRecord.Framework.ActiveRecordException"/>
            </summary>
            <param name="targetType">The target type</param>
            <param name="detachedQuery">The query expression</param>
            <returns>A <c>targetType</c> instance or <c>null</c></returns>
        </member>
        <member name="M:uNhAddIns.ActiveRecord.ActiveRecordMediator.SlicedFindAll(System.Type,System.Int32,System.Int32,uNhAddIns.NH.IDetachedQuery)">
            <summary>
            Returns a portion of the query results (sliced)
            </summary>
            <param name="targetType">The target type.</param>
            <param name="firstResult">The number of the first row to retrieve.</param>
            <param name="maxResults">The maximum number of results retrieved.</param>
            <param name="detachedQuery">The query expression</param>
            <returns>The sliced query results.</returns>
        </member>
        <member name="T:uNhAddIns.ActiveRecord.ActiveRecordMediator`1">
            <summary>
            Allow programmers to use the ActiveRecord functionality without direct reference to <c>ActiveRecordBase</c>
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:uNhAddIns.ActiveRecord.ActiveRecordMediator`1.Exists(uNhAddIns.NH.IDetachedQuery)">
            <summary>
            Check if any instance matches the query.
            </summary>
            <param name="detachedQuery">The query expression</param>
            <returns><c>true</c> if an instance is found; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:uNhAddIns.ActiveRecord.ActiveRecordMediator`1.FindAll(uNhAddIns.NH.IDetachedQuery)">
            <summary>
            Returns all instances found for the specified type according to the criteria
            </summary>
            <param name="detachedQuery">The query expression</param>
            <returns>The <see cref="T:System.Array"/> of results.</returns>
        </member>
        <member name="M:uNhAddIns.ActiveRecord.ActiveRecordMediator`1.FindFirst(uNhAddIns.NH.IDetachedQuery)">
            <summary>
            Searches and returns the first row.
            </summary>
            <param name="detachedQuery">The expression query.</param>
            <returns>A <c>targetType</c> instance or <c>null.</c></returns>
        </member>
        <member name="M:uNhAddIns.ActiveRecord.ActiveRecordMediator`1.FindOne(uNhAddIns.NH.IDetachedQuery)">
            <summary>
            Searches and returns a row. If more than one is found, 
            throws <see cref="T:Castle.ActiveRecord.Framework.ActiveRecordException"/>
            </summary>
            <param name="detachedQuery">The query expression</param>
            <returns>A <c>targetType</c> instance or <c>null</c></returns>
        </member>
        <member name="M:uNhAddIns.ActiveRecord.ActiveRecordMediator`1.SlicedFindAll(System.Int32,System.Int32,uNhAddIns.NH.IDetachedQuery)">
            <summary>
            Returns a portion of the query results (sliced)
            </summary>
            <param name="firstResult">The number of the first row to retrieve.</param>
            <param name="maxResults">The maximum number of results retrieved.</param>
            <param name="detachedQuery">The query expression</param>
            <returns>The sliced query results.</returns>
        </member>
    </members>
</doc>
