#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[System.Data.Linq.Mapping.DatabaseAttribute(Name="tribalwars")]
public partial class TribalWarsMappingDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void Insertdiplomate(diplomate instance);
  partial void Updatediplomate(diplomate instance);
  partial void Deletediplomate(diplomate instance);
  partial void InsertGroup(Group instance);
  partial void UpdateGroup(Group instance);
  partial void DeleteGroup(Group instance);
  partial void InsertOffer(Offer instance);
  partial void UpdateOffer(Offer instance);
  partial void DeleteOffer(Offer instance);
  partial void InsertUser(User instance);
  partial void UpdateUser(User instance);
  partial void DeleteUser(User instance);
  partial void InsertVillage(Village instance);
  partial void UpdateVillage(Village instance);
  partial void DeleteVillage(Village instance);
  partial void InsertAttackTo(AttackTo instance);
  partial void UpdateAttackTo(AttackTo instance);
  partial void DeleteAttackTo(AttackTo instance);
  partial void InsertSupportTo(SupportTo instance);
  partial void UpdateSupportTo(SupportTo instance);
  partial void DeleteSupportTo(SupportTo instance);
  partial void InsertTradingTo(TradingTo instance);
  partial void UpdateTradingTo(TradingTo instance);
  partial void DeleteTradingTo(TradingTo instance);
  partial void InsertReturn(Return instance);
  partial void UpdateReturn(Return instance);
  partial void DeleteReturn(Return instance);
  partial void InsertAttackFrom(AttackFrom instance);
  partial void UpdateAttackFrom(AttackFrom instance);
  partial void DeleteAttackFrom(AttackFrom instance);
  partial void InsertSupportFrom(SupportFrom instance);
  partial void UpdateSupportFrom(SupportFrom instance);
  partial void DeleteSupportFrom(SupportFrom instance);
  partial void InsertTradingFrom(TradingFrom instance);
  partial void UpdateTradingFrom(TradingFrom instance);
  partial void DeleteTradingFrom(TradingFrom instance);
  #endregion
	
	public TribalWarsMappingDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["tribalwarsConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public TribalWarsMappingDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public TribalWarsMappingDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public TribalWarsMappingDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public TribalWarsMappingDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<diplomate> diplomates
	{
		get
		{
			return this.GetTable<diplomate>();
		}
	}
	
	public System.Data.Linq.Table<Group> Groups
	{
		get
		{
			return this.GetTable<Group>();
		}
	}
	
	public System.Data.Linq.Table<Offer> Offers
	{
		get
		{
			return this.GetTable<Offer>();
		}
	}
	
	public System.Data.Linq.Table<User> Users
	{
		get
		{
			return this.GetTable<User>();
		}
	}
	
	public System.Data.Linq.Table<Village> Villages
	{
		get
		{
			return this.GetTable<Village>();
		}
	}
	
	public System.Data.Linq.Table<AttackTo> AttackTos
	{
		get
		{
			return this.GetTable<AttackTo>();
		}
	}
	
	public System.Data.Linq.Table<SupportTo> SupportTos
	{
		get
		{
			return this.GetTable<SupportTo>();
		}
	}
	
	public System.Data.Linq.Table<TradingTo> TradingTos
	{
		get
		{
			return this.GetTable<TradingTo>();
		}
	}
	
	public System.Data.Linq.Table<Return> Returns
	{
		get
		{
			return this.GetTable<Return>();
		}
	}
	
	public System.Data.Linq.Table<AttackFrom> AttackFroms
	{
		get
		{
			return this.GetTable<AttackFrom>();
		}
	}
	
	public System.Data.Linq.Table<SupportFrom> SupportFroms
	{
		get
		{
			return this.GetTable<SupportFrom>();
		}
	}
	
	public System.Data.Linq.Table<TradingFrom> TradingFroms
	{
		get
		{
			return this.GetTable<TradingFrom>();
		}
	}
}

[Table(Name="dbo.diplomates")]
public partial class diplomate : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _group_1;
	
	private string _group_2;
	
	private System.Nullable<int> _type;
	
	private EntityRef<Group> _group;
	
	private EntityRef<Group> _Group1;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Ongroup_1Changing(string value);
    partial void Ongroup_1Changed();
    partial void Ongroup_2Changing(string value);
    partial void Ongroup_2Changed();
    partial void OntypeChanging(System.Nullable<int> value);
    partial void OntypeChanged();
    #endregion
	
	public diplomate()
	{
		this._group = default(EntityRef<Group>);
		this._Group1 = default(EntityRef<Group>);
		OnCreated();
	}
	
	[Column(Storage="_group_1", DbType="NVarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string group_1
	{
		get
		{
			return this._group_1;
		}
		set
		{
			if ((this._group_1 != value))
			{
				if (this._group.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.Ongroup_1Changing(value);
				this.SendPropertyChanging();
				this._group_1 = value;
				this.SendPropertyChanged("group_1");
				this.Ongroup_1Changed();
			}
		}
	}
	
	[Column(Storage="_group_2", DbType="NVarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string group_2
	{
		get
		{
			return this._group_2;
		}
		set
		{
			if ((this._group_2 != value))
			{
				if (this._Group1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.Ongroup_2Changing(value);
				this.SendPropertyChanging();
				this._group_2 = value;
				this.SendPropertyChanged("group_2");
				this.Ongroup_2Changed();
			}
		}
	}
	
	[Column(Storage="_type", DbType="Int")]
	public System.Nullable<int> type
	{
		get
		{
			return this._type;
		}
		set
		{
			if ((this._type != value))
			{
				this.OntypeChanging(value);
				this.SendPropertyChanging();
				this._type = value;
				this.SendPropertyChanged("type");
				this.OntypeChanged();
			}
		}
	}
	
	[Association(Name="Group_diplomate", Storage="_group", ThisKey="group_1", OtherKey="ID", IsForeignKey=true)]
	public Group group
	{
		get
		{
			return this._group.Entity;
		}
		set
		{
			Group previousValue = this._group.Entity;
			if (((previousValue != value) 
						|| (this._group.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._group.Entity = null;
					previousValue.diplomates.Remove(this);
				}
				this._group.Entity = value;
				if ((value != null))
				{
					value.diplomates.Add(this);
					this._group_1 = value.ID;
				}
				else
				{
					this._group_1 = default(string);
				}
				this.SendPropertyChanged("group");
			}
		}
	}
	
	[Association(Name="Group_diplomate1", Storage="_Group1", ThisKey="group_2", OtherKey="ID", IsForeignKey=true)]
	public Group Group1
	{
		get
		{
			return this._Group1.Entity;
		}
		set
		{
			Group previousValue = this._Group1.Entity;
			if (((previousValue != value) 
						|| (this._Group1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Group1.Entity = null;
					previousValue.diplomates1.Remove(this);
				}
				this._Group1.Entity = value;
				if ((value != null))
				{
					value.diplomates1.Add(this);
					this._group_2 = value.ID;
				}
				else
				{
					this._group_2 = default(string);
				}
				this.SendPropertyChanged("Group1");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.groups")]
public partial class Group : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _ID;
	
	private string _Name;
	
	private string _Allies;
	
	private string _Naps;
	
	private string _Enemies;
	
	private EntitySet<diplomate> _diplomates;
	
	private EntitySet<diplomate> _diplomates1;
	
	private EntitySet<User> _Users;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAlliesChanging(string value);
    partial void OnAlliesChanged();
    partial void OnNapsChanging(string value);
    partial void OnNapsChanged();
    partial void OnEnemiesChanging(string value);
    partial void OnEnemiesChanged();
    #endregion
	
	public Group()
	{
		this._diplomates = new EntitySet<diplomate>(new Action<diplomate>(this.attach_diplomates), new Action<diplomate>(this.detach_diplomates));
		this._diplomates1 = new EntitySet<diplomate>(new Action<diplomate>(this.attach_diplomates1), new Action<diplomate>(this.detach_diplomates1));
		this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
		OnCreated();
	}
	
	[Column(Name="id", Storage="_ID", DbType="NVarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Name="name", Storage="_Name", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Column(Storage="_Allies", CanBeNull=false)]
	public string Allies
	{
		get
		{
			return this._Allies;
		}
		set
		{
			if ((this._Allies != value))
			{
				this.OnAlliesChanging(value);
				this.SendPropertyChanging();
				this._Allies = value;
				this.SendPropertyChanged("Allies");
				this.OnAlliesChanged();
			}
		}
	}
	
	[Column(Storage="_Naps", CanBeNull=false)]
	public string Naps
	{
		get
		{
			return this._Naps;
		}
		set
		{
			if ((this._Naps != value))
			{
				this.OnNapsChanging(value);
				this.SendPropertyChanging();
				this._Naps = value;
				this.SendPropertyChanged("Naps");
				this.OnNapsChanged();
			}
		}
	}
	
	[Column(Storage="_Enemies", CanBeNull=false)]
	public string Enemies
	{
		get
		{
			return this._Enemies;
		}
		set
		{
			if ((this._Enemies != value))
			{
				this.OnEnemiesChanging(value);
				this.SendPropertyChanging();
				this._Enemies = value;
				this.SendPropertyChanged("Enemies");
				this.OnEnemiesChanged();
			}
		}
	}
	
	[Association(Name="Group_diplomate", Storage="_diplomates", ThisKey="ID", OtherKey="group_1")]
	public EntitySet<diplomate> diplomates
	{
		get
		{
			return this._diplomates;
		}
		set
		{
			this._diplomates.Assign(value);
		}
	}
	
	[Association(Name="Group_diplomate1", Storage="_diplomates1", ThisKey="ID", OtherKey="group_2")]
	public EntitySet<diplomate> diplomates1
	{
		get
		{
			return this._diplomates1;
		}
		set
		{
			this._diplomates1.Assign(value);
		}
	}
	
	[Association(Name="Group_User", Storage="_Users", ThisKey="ID", OtherKey="group_id")]
	public EntitySet<User> Users
	{
		get
		{
			return this._Users;
		}
		set
		{
			this._Users.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_diplomates(diplomate entity)
	{
		this.SendPropertyChanging();
		entity.group = this;
	}
	
	private void detach_diplomates(diplomate entity)
	{
		this.SendPropertyChanging();
		entity.group = null;
	}
	
	private void attach_diplomates1(diplomate entity)
	{
		this.SendPropertyChanging();
		entity.Group1 = this;
	}
	
	private void detach_diplomates1(diplomate entity)
	{
		this.SendPropertyChanging();
		entity.Group1 = null;
	}
	
	private void attach_Users(User entity)
	{
		this.SendPropertyChanging();
		entity.Group = this;
	}
	
	private void detach_Users(User entity)
	{
		this.SendPropertyChanging();
		entity.Group = null;
	}
}

[Table(Name="dbo.offers")]
public partial class Offer : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _OfferType;
	
	private int _OfferQuantity;
	
	private int _ForType;
	
	private int _ForQuantity;
	
	private int _OfferNumber;
	
	private int _MaxTransportTime;
	
	private int _village_id;
	
	private EntityRef<Village> _Village;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnOfferTypeChanging(int value);
    partial void OnOfferTypeChanged();
    partial void OnOfferQuantityChanging(int value);
    partial void OnOfferQuantityChanged();
    partial void OnForTypeChanging(int value);
    partial void OnForTypeChanged();
    partial void OnForQuantityChanging(int value);
    partial void OnForQuantityChanged();
    partial void OnOfferNumberChanging(int value);
    partial void OnOfferNumberChanged();
    partial void OnMaxTransportTimeChanging(int value);
    partial void OnMaxTransportTimeChanged();
    partial void Onvillage_idChanging(int value);
    partial void Onvillage_idChanged();
    #endregion
	
	public Offer()
	{
		this._Village = default(EntityRef<Village>);
		OnCreated();
	}
	
	[Column(Name="id", Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Name="offertype", Storage="_OfferType", DbType="Int NOT NULL")]
	public int OfferType
	{
		get
		{
			return this._OfferType;
		}
		set
		{
			if ((this._OfferType != value))
			{
				this.OnOfferTypeChanging(value);
				this.SendPropertyChanging();
				this._OfferType = value;
				this.SendPropertyChanged("OfferType");
				this.OnOfferTypeChanged();
			}
		}
	}
	
	[Column(Name="offerquantity", Storage="_OfferQuantity", DbType="Int NOT NULL")]
	public int OfferQuantity
	{
		get
		{
			return this._OfferQuantity;
		}
		set
		{
			if ((this._OfferQuantity != value))
			{
				this.OnOfferQuantityChanging(value);
				this.SendPropertyChanging();
				this._OfferQuantity = value;
				this.SendPropertyChanged("OfferQuantity");
				this.OnOfferQuantityChanged();
			}
		}
	}
	
	[Column(Name="fortype", Storage="_ForType", DbType="Int NOT NULL")]
	public int ForType
	{
		get
		{
			return this._ForType;
		}
		set
		{
			if ((this._ForType != value))
			{
				this.OnForTypeChanging(value);
				this.SendPropertyChanging();
				this._ForType = value;
				this.SendPropertyChanged("ForType");
				this.OnForTypeChanged();
			}
		}
	}
	
	[Column(Name="forquantity", Storage="_ForQuantity", DbType="Int NOT NULL")]
	public int ForQuantity
	{
		get
		{
			return this._ForQuantity;
		}
		set
		{
			if ((this._ForQuantity != value))
			{
				this.OnForQuantityChanging(value);
				this.SendPropertyChanging();
				this._ForQuantity = value;
				this.SendPropertyChanged("ForQuantity");
				this.OnForQuantityChanged();
			}
		}
	}
	
	[Column(Name="offernumber", Storage="_OfferNumber", DbType="Int NOT NULL")]
	public int OfferNumber
	{
		get
		{
			return this._OfferNumber;
		}
		set
		{
			if ((this._OfferNumber != value))
			{
				this.OnOfferNumberChanging(value);
				this.SendPropertyChanging();
				this._OfferNumber = value;
				this.SendPropertyChanged("OfferNumber");
				this.OnOfferNumberChanged();
			}
		}
	}
	
	[Column(Name="maxtransporttime", Storage="_MaxTransportTime", DbType="Int NOT NULL")]
	public int MaxTransportTime
	{
		get
		{
			return this._MaxTransportTime;
		}
		set
		{
			if ((this._MaxTransportTime != value))
			{
				this.OnMaxTransportTimeChanging(value);
				this.SendPropertyChanging();
				this._MaxTransportTime = value;
				this.SendPropertyChanged("MaxTransportTime");
				this.OnMaxTransportTimeChanged();
			}
		}
	}
	
	[Column(Storage="_village_id", DbType="Int NOT NULL")]
	public int village_id
	{
		get
		{
			return this._village_id;
		}
		set
		{
			if ((this._village_id != value))
			{
				if (this._Village.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.Onvillage_idChanging(value);
				this.SendPropertyChanging();
				this._village_id = value;
				this.SendPropertyChanged("village_id");
				this.Onvillage_idChanged();
			}
		}
	}
	
	[Association(Name="Village_Offer", Storage="_Village", ThisKey="village_id", OtherKey="ID", IsForeignKey=true)]
	public Village Village
	{
		get
		{
			return this._Village.Entity;
		}
		set
		{
			Village previousValue = this._Village.Entity;
			if (((previousValue != value) 
						|| (this._Village.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Village.Entity = null;
					previousValue.Offers.Remove(this);
				}
				this._Village.Entity = value;
				if ((value != null))
				{
					value.Offers.Add(this);
					this._village_id = value.ID;
				}
				else
				{
					this._village_id = default(int);
				}
				this.SendPropertyChanged("Village");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.users")]
public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _Username;
	
	private string _group_id;
	
	private bool _Sex;
	
	private System.Nullable<System.DateTime> _Birthdate;
	
	private System.Nullable<System.DateTime> _LastUpdate;
	
	private EntitySet<Village> _Villages;
	
	private EntityRef<Group> _Group;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void Ongroup_idChanging(string value);
    partial void Ongroup_idChanged();
    partial void OnSexChanging(bool value);
    partial void OnSexChanged();
    partial void OnBirthdateChanging(System.Nullable<System.DateTime> value);
    partial void OnBirthdateChanged();
    partial void OnLastUpdateChanging(System.Nullable<System.DateTime> value);
    partial void OnLastUpdateChanged();
    #endregion
	
	public User()
	{
		this._Villages = new EntitySet<Village>(new Action<Village>(this.attach_Villages), new Action<Village>(this.detach_Villages));
		this._Group = default(EntityRef<Group>);
		OnCreated();
	}
	
	[Column(Name="username", Storage="_Username", DbType="NVarChar(200) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string Username
	{
		get
		{
			return this._Username;
		}
		set
		{
			if ((this._Username != value))
			{
				this.OnUsernameChanging(value);
				this.SendPropertyChanging();
				this._Username = value;
				this.SendPropertyChanged("Username");
				this.OnUsernameChanged();
			}
		}
	}
	
	[Column(Storage="_group_id", DbType="NVarChar(10)")]
	public string group_id
	{
		get
		{
			return this._group_id;
		}
		set
		{
			if ((this._group_id != value))
			{
				if (this._Group.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.Ongroup_idChanging(value);
				this.SendPropertyChanging();
				this._group_id = value;
				this.SendPropertyChanged("group_id");
				this.Ongroup_idChanged();
			}
		}
	}
	
	[Column(Name="sex", Storage="_Sex", DbType="Bit NOT NULL")]
	public bool Sex
	{
		get
		{
			return this._Sex;
		}
		set
		{
			if ((this._Sex != value))
			{
				this.OnSexChanging(value);
				this.SendPropertyChanging();
				this._Sex = value;
				this.SendPropertyChanged("Sex");
				this.OnSexChanged();
			}
		}
	}
	
	[Column(Name="birthdate", Storage="_Birthdate", DbType="DateTime")]
	public System.Nullable<System.DateTime> Birthdate
	{
		get
		{
			return this._Birthdate;
		}
		set
		{
			if ((this._Birthdate != value))
			{
				this.OnBirthdateChanging(value);
				this.SendPropertyChanging();
				this._Birthdate = value;
				this.SendPropertyChanged("Birthdate");
				this.OnBirthdateChanged();
			}
		}
	}
	
	[Column(Name="last_update", Storage="_LastUpdate", DbType="DateTime")]
	public System.Nullable<System.DateTime> LastUpdate
	{
		get
		{
			return this._LastUpdate;
		}
		set
		{
			if ((this._LastUpdate != value))
			{
				this.OnLastUpdateChanging(value);
				this.SendPropertyChanging();
				this._LastUpdate = value;
				this.SendPropertyChanged("LastUpdate");
				this.OnLastUpdateChanged();
			}
		}
	}
	
	[Association(Name="User_Village", Storage="_Villages", ThisKey="Username", OtherKey="userid")]
	public EntitySet<Village> Villages
	{
		get
		{
			return this._Villages;
		}
		set
		{
			this._Villages.Assign(value);
		}
	}
	
	[Association(Name="Group_User", Storage="_Group", ThisKey="group_id", OtherKey="ID", IsForeignKey=true)]
	public Group Group
	{
		get
		{
			return this._Group.Entity;
		}
		set
		{
			Group previousValue = this._Group.Entity;
			if (((previousValue != value) 
						|| (this._Group.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Group.Entity = null;
					previousValue.Users.Remove(this);
				}
				this._Group.Entity = value;
				if ((value != null))
				{
					value.Users.Add(this);
					this._group_id = value.ID;
				}
				else
				{
					this._group_id = default(string);
				}
				this.SendPropertyChanged("Group");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Villages(Village entity)
	{
		this.SendPropertyChanging();
		entity.User = this;
	}
	
	private void detach_Villages(Village entity)
	{
		this.SendPropertyChanging();
		entity.User = null;
	}
}

[Table(Name="dbo.villages")]
public partial class Village : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _X;
	
	private int _Y;
	
	private string _Name;
	
	private string _userid;
	
	private System.Nullable<int> _Wood;
	
	private System.Nullable<int> _Clay;
	
	private System.Nullable<int> _Iron;
	
	private System.Nullable<int> _Headquarter;
	
	private System.Nullable<int> _Barracks;
	
	private System.Nullable<int> _Stable;
	
	private System.Nullable<int> _Workshop;
	
	private System.Nullable<int> _Academy;
	
	private System.Nullable<int> _Smithy;
	
	private System.Nullable<int> _Rally;
	
	private System.Nullable<int> _Market;
	
	private System.Nullable<int> _TimberCamp;
	
	private System.Nullable<int> _ClayPit;
	
	private System.Nullable<int> _IronMine;
	
	private System.Nullable<int> _Storage;
	
	private System.Nullable<int> _Farm;
	
	private System.Nullable<int> _HiddenPlace;
	
	private System.Nullable<int> _Wall;
	
	private int _Points;
	
	private System.Nullable<int> _SpearTechLevel;
	
	private System.Nullable<int> _SwordTechLevel;
	
	private System.Nullable<int> _AxeTechLevel;
	
	private System.Nullable<int> _ScoutTechLevel;
	
	private System.Nullable<int> _LightTechLevel;
	
	private System.Nullable<int> _HeavyTechLevel;
	
	private System.Nullable<int> _RamTechLevel;
	
	private System.Nullable<int> _CatapultTechLevel;
	
	private int _Spear;
	
	private System.Nullable<int> _Sword;
	
	private System.Nullable<int> _Axe;
	
	private System.Nullable<int> _Scout;
	
	private System.Nullable<int> _Light;
	
	private System.Nullable<int> _Heavy;
	
	private System.Nullable<int> _Ram;
	
	private System.Nullable<int> _Catapult;
	
	private System.Nullable<int> _Nobleman;
	
	private System.Nullable<System.DateTime> _LastUpdate;
	
	private System.Nullable<int> _Loyal;
	
	private EntitySet<Offer> _Offers;
	
	private EntitySet<AttackTo> _movements;
	
	private EntitySet<AttackTo> _AttackTos;
	
	private EntitySet<SupportTo> _movements1;
	
	private EntitySet<SupportTo> _SupportTos;
	
	private EntitySet<TradingTo> _movements2;
	
	private EntitySet<TradingTo> _TradingTos;
	
	private EntitySet<Return> _movements3;
	
	private EntitySet<Return> _Returns;
	
	private EntitySet<AttackFrom> _movements4;
	
	private EntitySet<AttackFrom> _AttackFroms;
	
	private EntitySet<SupportFrom> _movements5;
	
	private EntitySet<SupportFrom> _SupportFroms;
	
	private EntitySet<TradingFrom> _movements6;
	
	private EntitySet<TradingFrom> _TradingFroms;
	
	private EntityRef<User> _User;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnXChanging(int value);
    partial void OnXChanged();
    partial void OnYChanging(int value);
    partial void OnYChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnuseridChanging(string value);
    partial void OnuseridChanged();
    partial void OnWoodChanging(System.Nullable<int> value);
    partial void OnWoodChanged();
    partial void OnClayChanging(System.Nullable<int> value);
    partial void OnClayChanged();
    partial void OnIronChanging(System.Nullable<int> value);
    partial void OnIronChanged();
    partial void OnHeadquarterChanging(System.Nullable<int> value);
    partial void OnHeadquarterChanged();
    partial void OnBarracksChanging(System.Nullable<int> value);
    partial void OnBarracksChanged();
    partial void OnStableChanging(System.Nullable<int> value);
    partial void OnStableChanged();
    partial void OnWorkshopChanging(System.Nullable<int> value);
    partial void OnWorkshopChanged();
    partial void OnAcademyChanging(System.Nullable<int> value);
    partial void OnAcademyChanged();
    partial void OnSmithyChanging(System.Nullable<int> value);
    partial void OnSmithyChanged();
    partial void OnRallyChanging(System.Nullable<int> value);
    partial void OnRallyChanged();
    partial void OnMarketChanging(System.Nullable<int> value);
    partial void OnMarketChanged();
    partial void OnTimberCampChanging(System.Nullable<int> value);
    partial void OnTimberCampChanged();
    partial void OnClayPitChanging(System.Nullable<int> value);
    partial void OnClayPitChanged();
    partial void OnIronMineChanging(System.Nullable<int> value);
    partial void OnIronMineChanged();
    partial void OnStorageChanging(System.Nullable<int> value);
    partial void OnStorageChanged();
    partial void OnFarmChanging(System.Nullable<int> value);
    partial void OnFarmChanged();
    partial void OnHiddenPlaceChanging(System.Nullable<int> value);
    partial void OnHiddenPlaceChanged();
    partial void OnWallChanging(System.Nullable<int> value);
    partial void OnWallChanged();
    partial void OnPointsChanging(int value);
    partial void OnPointsChanged();
    partial void OnSpearTechLevelChanging(System.Nullable<int> value);
    partial void OnSpearTechLevelChanged();
    partial void OnSwordTechLevelChanging(System.Nullable<int> value);
    partial void OnSwordTechLevelChanged();
    partial void OnAxeTechLevelChanging(System.Nullable<int> value);
    partial void OnAxeTechLevelChanged();
    partial void OnScoutTechLevelChanging(System.Nullable<int> value);
    partial void OnScoutTechLevelChanged();
    partial void OnLightTechLevelChanging(System.Nullable<int> value);
    partial void OnLightTechLevelChanged();
    partial void OnHeavyTechLevelChanging(System.Nullable<int> value);
    partial void OnHeavyTechLevelChanged();
    partial void OnRamTechLevelChanging(System.Nullable<int> value);
    partial void OnRamTechLevelChanged();
    partial void OnCatapultTechLevelChanging(System.Nullable<int> value);
    partial void OnCatapultTechLevelChanged();
    partial void OnSpearChanging(int value);
    partial void OnSpearChanged();
    partial void OnSwordChanging(System.Nullable<int> value);
    partial void OnSwordChanged();
    partial void OnAxeChanging(System.Nullable<int> value);
    partial void OnAxeChanged();
    partial void OnScoutChanging(System.Nullable<int> value);
    partial void OnScoutChanged();
    partial void OnLightChanging(System.Nullable<int> value);
    partial void OnLightChanged();
    partial void OnHeavyChanging(System.Nullable<int> value);
    partial void OnHeavyChanged();
    partial void OnRamChanging(System.Nullable<int> value);
    partial void OnRamChanged();
    partial void OnCatapultChanging(System.Nullable<int> value);
    partial void OnCatapultChanged();
    partial void OnNoblemanChanging(System.Nullable<int> value);
    partial void OnNoblemanChanged();
    partial void OnLastUpdateChanging(System.Nullable<System.DateTime> value);
    partial void OnLastUpdateChanged();
    partial void OnLoyalChanging(System.Nullable<int> value);
    partial void OnLoyalChanged();
    #endregion
	
	public Village()
	{
		this._Offers = new EntitySet<Offer>(new Action<Offer>(this.attach_Offers), new Action<Offer>(this.detach_Offers));
		this._movements = new EntitySet<AttackTo>(new Action<AttackTo>(this.attach_movements), new Action<AttackTo>(this.detach_movements));
		this._AttackTos = new EntitySet<AttackTo>(new Action<AttackTo>(this.attach_AttackTos), new Action<AttackTo>(this.detach_AttackTos));
		this._movements1 = new EntitySet<SupportTo>(new Action<SupportTo>(this.attach_movements1), new Action<SupportTo>(this.detach_movements1));
		this._SupportTos = new EntitySet<SupportTo>(new Action<SupportTo>(this.attach_SupportTos), new Action<SupportTo>(this.detach_SupportTos));
		this._movements2 = new EntitySet<TradingTo>(new Action<TradingTo>(this.attach_movements2), new Action<TradingTo>(this.detach_movements2));
		this._TradingTos = new EntitySet<TradingTo>(new Action<TradingTo>(this.attach_TradingTos), new Action<TradingTo>(this.detach_TradingTos));
		this._movements3 = new EntitySet<Return>(new Action<Return>(this.attach_movements3), new Action<Return>(this.detach_movements3));
		this._Returns = new EntitySet<Return>(new Action<Return>(this.attach_Returns), new Action<Return>(this.detach_Returns));
		this._movements4 = new EntitySet<AttackFrom>(new Action<AttackFrom>(this.attach_movements4), new Action<AttackFrom>(this.detach_movements4));
		this._AttackFroms = new EntitySet<AttackFrom>(new Action<AttackFrom>(this.attach_AttackFroms), new Action<AttackFrom>(this.detach_AttackFroms));
		this._movements5 = new EntitySet<SupportFrom>(new Action<SupportFrom>(this.attach_movements5), new Action<SupportFrom>(this.detach_movements5));
		this._SupportFroms = new EntitySet<SupportFrom>(new Action<SupportFrom>(this.attach_SupportFroms), new Action<SupportFrom>(this.detach_SupportFroms));
		this._movements6 = new EntitySet<TradingFrom>(new Action<TradingFrom>(this.attach_movements6), new Action<TradingFrom>(this.detach_movements6));
		this._TradingFroms = new EntitySet<TradingFrom>(new Action<TradingFrom>(this.attach_TradingFroms), new Action<TradingFrom>(this.detach_TradingFroms));
		this._User = default(EntityRef<User>);
		OnCreated();
	}
	
	[Column(Name="id", Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Name="x", Storage="_X", DbType="Int NOT NULL")]
	public int X
	{
		get
		{
			return this._X;
		}
		set
		{
			if ((this._X != value))
			{
				this.OnXChanging(value);
				this.SendPropertyChanging();
				this._X = value;
				this.SendPropertyChanged("X");
				this.OnXChanged();
			}
		}
	}
	
	[Column(Name="y", Storage="_Y", DbType="Int NOT NULL")]
	public int Y
	{
		get
		{
			return this._Y;
		}
		set
		{
			if ((this._Y != value))
			{
				this.OnYChanging(value);
				this.SendPropertyChanging();
				this._Y = value;
				this.SendPropertyChanged("Y");
				this.OnYChanged();
			}
		}
	}
	
	[Column(Name="name", Storage="_Name", DbType="NVarChar(100)")]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Column(Storage="_userid", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
	public string userid
	{
		get
		{
			return this._userid;
		}
		set
		{
			if ((this._userid != value))
			{
				if (this._User.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnuseridChanging(value);
				this.SendPropertyChanging();
				this._userid = value;
				this.SendPropertyChanged("userid");
				this.OnuseridChanged();
			}
		}
	}
	
	[Column(Name="wood", Storage="_Wood", DbType="Int")]
	public System.Nullable<int> Wood
	{
		get
		{
			return this._Wood;
		}
		set
		{
			if ((this._Wood != value))
			{
				this.OnWoodChanging(value);
				this.SendPropertyChanging();
				this._Wood = value;
				this.SendPropertyChanged("Wood");
				this.OnWoodChanged();
			}
		}
	}
	
	[Column(Name="clay", Storage="_Clay", DbType="Int")]
	public System.Nullable<int> Clay
	{
		get
		{
			return this._Clay;
		}
		set
		{
			if ((this._Clay != value))
			{
				this.OnClayChanging(value);
				this.SendPropertyChanging();
				this._Clay = value;
				this.SendPropertyChanged("Clay");
				this.OnClayChanged();
			}
		}
	}
	
	[Column(Name="iron", Storage="_Iron", DbType="Int")]
	public System.Nullable<int> Iron
	{
		get
		{
			return this._Iron;
		}
		set
		{
			if ((this._Iron != value))
			{
				this.OnIronChanging(value);
				this.SendPropertyChanging();
				this._Iron = value;
				this.SendPropertyChanged("Iron");
				this.OnIronChanged();
			}
		}
	}
	
	[Column(Name="headquarter", Storage="_Headquarter", DbType="Int")]
	public System.Nullable<int> Headquarter
	{
		get
		{
			return this._Headquarter;
		}
		set
		{
			if ((this._Headquarter != value))
			{
				this.OnHeadquarterChanging(value);
				this.SendPropertyChanging();
				this._Headquarter = value;
				this.SendPropertyChanged("Headquarter");
				this.OnHeadquarterChanged();
			}
		}
	}
	
	[Column(Name="barracks", Storage="_Barracks", DbType="Int")]
	public System.Nullable<int> Barracks
	{
		get
		{
			return this._Barracks;
		}
		set
		{
			if ((this._Barracks != value))
			{
				this.OnBarracksChanging(value);
				this.SendPropertyChanging();
				this._Barracks = value;
				this.SendPropertyChanged("Barracks");
				this.OnBarracksChanged();
			}
		}
	}
	
	[Column(Name="stable", Storage="_Stable", DbType="Int")]
	public System.Nullable<int> Stable
	{
		get
		{
			return this._Stable;
		}
		set
		{
			if ((this._Stable != value))
			{
				this.OnStableChanging(value);
				this.SendPropertyChanging();
				this._Stable = value;
				this.SendPropertyChanged("Stable");
				this.OnStableChanged();
			}
		}
	}
	
	[Column(Name="workshop", Storage="_Workshop", DbType="Int")]
	public System.Nullable<int> Workshop
	{
		get
		{
			return this._Workshop;
		}
		set
		{
			if ((this._Workshop != value))
			{
				this.OnWorkshopChanging(value);
				this.SendPropertyChanging();
				this._Workshop = value;
				this.SendPropertyChanged("Workshop");
				this.OnWorkshopChanged();
			}
		}
	}
	
	[Column(Name="academy", Storage="_Academy", DbType="Int")]
	public System.Nullable<int> Academy
	{
		get
		{
			return this._Academy;
		}
		set
		{
			if ((this._Academy != value))
			{
				this.OnAcademyChanging(value);
				this.SendPropertyChanging();
				this._Academy = value;
				this.SendPropertyChanged("Academy");
				this.OnAcademyChanged();
			}
		}
	}
	
	[Column(Name="smithy", Storage="_Smithy", DbType="Int")]
	public System.Nullable<int> Smithy
	{
		get
		{
			return this._Smithy;
		}
		set
		{
			if ((this._Smithy != value))
			{
				this.OnSmithyChanging(value);
				this.SendPropertyChanging();
				this._Smithy = value;
				this.SendPropertyChanged("Smithy");
				this.OnSmithyChanged();
			}
		}
	}
	
	[Column(Name="rally", Storage="_Rally", DbType="Int")]
	public System.Nullable<int> Rally
	{
		get
		{
			return this._Rally;
		}
		set
		{
			if ((this._Rally != value))
			{
				this.OnRallyChanging(value);
				this.SendPropertyChanging();
				this._Rally = value;
				this.SendPropertyChanged("Rally");
				this.OnRallyChanged();
			}
		}
	}
	
	[Column(Name="market", Storage="_Market", DbType="Int")]
	public System.Nullable<int> Market
	{
		get
		{
			return this._Market;
		}
		set
		{
			if ((this._Market != value))
			{
				this.OnMarketChanging(value);
				this.SendPropertyChanging();
				this._Market = value;
				this.SendPropertyChanged("Market");
				this.OnMarketChanged();
			}
		}
	}
	
	[Column(Name="timbercamp", Storage="_TimberCamp", DbType="Int")]
	public System.Nullable<int> TimberCamp
	{
		get
		{
			return this._TimberCamp;
		}
		set
		{
			if ((this._TimberCamp != value))
			{
				this.OnTimberCampChanging(value);
				this.SendPropertyChanging();
				this._TimberCamp = value;
				this.SendPropertyChanged("TimberCamp");
				this.OnTimberCampChanged();
			}
		}
	}
	
	[Column(Name="claypit", Storage="_ClayPit", DbType="Int")]
	public System.Nullable<int> ClayPit
	{
		get
		{
			return this._ClayPit;
		}
		set
		{
			if ((this._ClayPit != value))
			{
				this.OnClayPitChanging(value);
				this.SendPropertyChanging();
				this._ClayPit = value;
				this.SendPropertyChanged("ClayPit");
				this.OnClayPitChanged();
			}
		}
	}
	
	[Column(Name="ironmine", Storage="_IronMine", DbType="Int")]
	public System.Nullable<int> IronMine
	{
		get
		{
			return this._IronMine;
		}
		set
		{
			if ((this._IronMine != value))
			{
				this.OnIronMineChanging(value);
				this.SendPropertyChanging();
				this._IronMine = value;
				this.SendPropertyChanged("IronMine");
				this.OnIronMineChanged();
			}
		}
	}
	
	[Column(Name="storage", Storage="_Storage", DbType="Int")]
	public System.Nullable<int> Storage
	{
		get
		{
			return this._Storage;
		}
		set
		{
			if ((this._Storage != value))
			{
				this.OnStorageChanging(value);
				this.SendPropertyChanging();
				this._Storage = value;
				this.SendPropertyChanged("Storage");
				this.OnStorageChanged();
			}
		}
	}
	
	[Column(Name="farm", Storage="_Farm", DbType="Int")]
	public System.Nullable<int> Farm
	{
		get
		{
			return this._Farm;
		}
		set
		{
			if ((this._Farm != value))
			{
				this.OnFarmChanging(value);
				this.SendPropertyChanging();
				this._Farm = value;
				this.SendPropertyChanged("Farm");
				this.OnFarmChanged();
			}
		}
	}
	
	[Column(Name="hide", Storage="_HiddenPlace", DbType="Int")]
	public System.Nullable<int> HiddenPlace
	{
		get
		{
			return this._HiddenPlace;
		}
		set
		{
			if ((this._HiddenPlace != value))
			{
				this.OnHiddenPlaceChanging(value);
				this.SendPropertyChanging();
				this._HiddenPlace = value;
				this.SendPropertyChanged("HiddenPlace");
				this.OnHiddenPlaceChanged();
			}
		}
	}
	
	[Column(Name="wall", Storage="_Wall", DbType="Int")]
	public System.Nullable<int> Wall
	{
		get
		{
			return this._Wall;
		}
		set
		{
			if ((this._Wall != value))
			{
				this.OnWallChanging(value);
				this.SendPropertyChanging();
				this._Wall = value;
				this.SendPropertyChanged("Wall");
				this.OnWallChanged();
			}
		}
	}
	
	[Column(Name="points", Storage="_Points", DbType="Int NOT NULL")]
	public int Points
	{
		get
		{
			return this._Points;
		}
		set
		{
			if ((this._Points != value))
			{
				this.OnPointsChanging(value);
				this.SendPropertyChanging();
				this._Points = value;
				this.SendPropertyChanged("Points");
				this.OnPointsChanged();
			}
		}
	}
	
	[Column(Name="unit_spear_tec_level", Storage="_SpearTechLevel", DbType="Int")]
	public System.Nullable<int> SpearTechLevel
	{
		get
		{
			return this._SpearTechLevel;
		}
		set
		{
			if ((this._SpearTechLevel != value))
			{
				this.OnSpearTechLevelChanging(value);
				this.SendPropertyChanging();
				this._SpearTechLevel = value;
				this.SendPropertyChanged("SpearTechLevel");
				this.OnSpearTechLevelChanged();
			}
		}
	}
	
	[Column(Name="unit_sword_tec_level", Storage="_SwordTechLevel", DbType="Int")]
	public System.Nullable<int> SwordTechLevel
	{
		get
		{
			return this._SwordTechLevel;
		}
		set
		{
			if ((this._SwordTechLevel != value))
			{
				this.OnSwordTechLevelChanging(value);
				this.SendPropertyChanging();
				this._SwordTechLevel = value;
				this.SendPropertyChanged("SwordTechLevel");
				this.OnSwordTechLevelChanged();
			}
		}
	}
	
	[Column(Name="unit_axe_tec_level", Storage="_AxeTechLevel", DbType="Int")]
	public System.Nullable<int> AxeTechLevel
	{
		get
		{
			return this._AxeTechLevel;
		}
		set
		{
			if ((this._AxeTechLevel != value))
			{
				this.OnAxeTechLevelChanging(value);
				this.SendPropertyChanging();
				this._AxeTechLevel = value;
				this.SendPropertyChanged("AxeTechLevel");
				this.OnAxeTechLevelChanged();
			}
		}
	}
	
	[Column(Name="unit_spy_tec_level", Storage="_ScoutTechLevel", DbType="Int")]
	public System.Nullable<int> ScoutTechLevel
	{
		get
		{
			return this._ScoutTechLevel;
		}
		set
		{
			if ((this._ScoutTechLevel != value))
			{
				this.OnScoutTechLevelChanging(value);
				this.SendPropertyChanging();
				this._ScoutTechLevel = value;
				this.SendPropertyChanged("ScoutTechLevel");
				this.OnScoutTechLevelChanged();
			}
		}
	}
	
	[Column(Name="unit_light_tec_level", Storage="_LightTechLevel", DbType="Int")]
	public System.Nullable<int> LightTechLevel
	{
		get
		{
			return this._LightTechLevel;
		}
		set
		{
			if ((this._LightTechLevel != value))
			{
				this.OnLightTechLevelChanging(value);
				this.SendPropertyChanging();
				this._LightTechLevel = value;
				this.SendPropertyChanged("LightTechLevel");
				this.OnLightTechLevelChanged();
			}
		}
	}
	
	[Column(Name="unit_heavy_tec_level", Storage="_HeavyTechLevel", DbType="Int")]
	public System.Nullable<int> HeavyTechLevel
	{
		get
		{
			return this._HeavyTechLevel;
		}
		set
		{
			if ((this._HeavyTechLevel != value))
			{
				this.OnHeavyTechLevelChanging(value);
				this.SendPropertyChanging();
				this._HeavyTechLevel = value;
				this.SendPropertyChanged("HeavyTechLevel");
				this.OnHeavyTechLevelChanged();
			}
		}
	}
	
	[Column(Name="unit_ram_tec_level", Storage="_RamTechLevel", DbType="Int")]
	public System.Nullable<int> RamTechLevel
	{
		get
		{
			return this._RamTechLevel;
		}
		set
		{
			if ((this._RamTechLevel != value))
			{
				this.OnRamTechLevelChanging(value);
				this.SendPropertyChanging();
				this._RamTechLevel = value;
				this.SendPropertyChanged("RamTechLevel");
				this.OnRamTechLevelChanged();
			}
		}
	}
	
	[Column(Name="unit_catapult_tec_level", Storage="_CatapultTechLevel", DbType="Int")]
	public System.Nullable<int> CatapultTechLevel
	{
		get
		{
			return this._CatapultTechLevel;
		}
		set
		{
			if ((this._CatapultTechLevel != value))
			{
				this.OnCatapultTechLevelChanging(value);
				this.SendPropertyChanging();
				this._CatapultTechLevel = value;
				this.SendPropertyChanged("CatapultTechLevel");
				this.OnCatapultTechLevelChanged();
			}
		}
	}
	
	[Column(Name="all_unit_spear", Storage="_Spear", DbType="Int NOT NULL")]
	public int Spear
	{
		get
		{
			return this._Spear;
		}
		set
		{
			if ((this._Spear != value))
			{
				this.OnSpearChanging(value);
				this.SendPropertyChanging();
				this._Spear = value;
				this.SendPropertyChanged("Spear");
				this.OnSpearChanged();
			}
		}
	}
	
	[Column(Name="all_unit_sword", Storage="_Sword", DbType="Int")]
	public System.Nullable<int> Sword
	{
		get
		{
			return this._Sword;
		}
		set
		{
			if ((this._Sword != value))
			{
				this.OnSwordChanging(value);
				this.SendPropertyChanging();
				this._Sword = value;
				this.SendPropertyChanged("Sword");
				this.OnSwordChanged();
			}
		}
	}
	
	[Column(Name="all_unit_axe", Storage="_Axe", DbType="Int")]
	public System.Nullable<int> Axe
	{
		get
		{
			return this._Axe;
		}
		set
		{
			if ((this._Axe != value))
			{
				this.OnAxeChanging(value);
				this.SendPropertyChanging();
				this._Axe = value;
				this.SendPropertyChanged("Axe");
				this.OnAxeChanged();
			}
		}
	}
	
	[Column(Name="all_unit_spy", Storage="_Scout", DbType="Int")]
	public System.Nullable<int> Scout
	{
		get
		{
			return this._Scout;
		}
		set
		{
			if ((this._Scout != value))
			{
				this.OnScoutChanging(value);
				this.SendPropertyChanging();
				this._Scout = value;
				this.SendPropertyChanged("Scout");
				this.OnScoutChanged();
			}
		}
	}
	
	[Column(Name="all_unit_light", Storage="_Light", DbType="Int")]
	public System.Nullable<int> Light
	{
		get
		{
			return this._Light;
		}
		set
		{
			if ((this._Light != value))
			{
				this.OnLightChanging(value);
				this.SendPropertyChanging();
				this._Light = value;
				this.SendPropertyChanged("Light");
				this.OnLightChanged();
			}
		}
	}
	
	[Column(Name="all_unit_heavy", Storage="_Heavy", DbType="Int")]
	public System.Nullable<int> Heavy
	{
		get
		{
			return this._Heavy;
		}
		set
		{
			if ((this._Heavy != value))
			{
				this.OnHeavyChanging(value);
				this.SendPropertyChanging();
				this._Heavy = value;
				this.SendPropertyChanged("Heavy");
				this.OnHeavyChanged();
			}
		}
	}
	
	[Column(Name="all_unit_ram", Storage="_Ram", DbType="Int")]
	public System.Nullable<int> Ram
	{
		get
		{
			return this._Ram;
		}
		set
		{
			if ((this._Ram != value))
			{
				this.OnRamChanging(value);
				this.SendPropertyChanging();
				this._Ram = value;
				this.SendPropertyChanged("Ram");
				this.OnRamChanged();
			}
		}
	}
	
	[Column(Name="all_unit_catapult", Storage="_Catapult", DbType="Int")]
	public System.Nullable<int> Catapult
	{
		get
		{
			return this._Catapult;
		}
		set
		{
			if ((this._Catapult != value))
			{
				this.OnCatapultChanging(value);
				this.SendPropertyChanging();
				this._Catapult = value;
				this.SendPropertyChanged("Catapult");
				this.OnCatapultChanged();
			}
		}
	}
	
	[Column(Name="all_unit_snob", Storage="_Nobleman", DbType="Int")]
	public System.Nullable<int> Nobleman
	{
		get
		{
			return this._Nobleman;
		}
		set
		{
			if ((this._Nobleman != value))
			{
				this.OnNoblemanChanging(value);
				this.SendPropertyChanging();
				this._Nobleman = value;
				this.SendPropertyChanged("Nobleman");
				this.OnNoblemanChanged();
			}
		}
	}
	
	[Column(Name="last_update", Storage="_LastUpdate", DbType="DateTime")]
	public System.Nullable<System.DateTime> LastUpdate
	{
		get
		{
			return this._LastUpdate;
		}
		set
		{
			if ((this._LastUpdate != value))
			{
				this.OnLastUpdateChanging(value);
				this.SendPropertyChanging();
				this._LastUpdate = value;
				this.SendPropertyChanged("LastUpdate");
				this.OnLastUpdateChanged();
			}
		}
	}
	
	[Column(Name="loyal", Storage="_Loyal", DbType="Int")]
	public System.Nullable<int> Loyal
	{
		get
		{
			return this._Loyal;
		}
		set
		{
			if ((this._Loyal != value))
			{
				this.OnLoyalChanging(value);
				this.SendPropertyChanging();
				this._Loyal = value;
				this.SendPropertyChanged("Loyal");
				this.OnLoyalChanged();
			}
		}
	}
	
	[Association(Name="Village_Offer", Storage="_Offers", ThisKey="ID", OtherKey="village_id")]
	public EntitySet<Offer> Offers
	{
		get
		{
			return this._Offers;
		}
		set
		{
			this._Offers.Assign(value);
		}
	}
	
	[Association(Name="Village_movement", Storage="_movements", ThisKey="ID", OtherKey="From")]
	public EntitySet<AttackTo> movements
	{
		get
		{
			return this._movements;
		}
		set
		{
			this._movements.Assign(value);
		}
	}
	
	[Association(Name="Village_movement1", Storage="_AttackTos", ThisKey="ID", OtherKey="To")]
	public EntitySet<AttackTo> AttackTos
	{
		get
		{
			return this._AttackTos;
		}
		set
		{
			this._AttackTos.Assign(value);
		}
	}
	
	[Association(Name="Village_movement2", Storage="_movements1", ThisKey="ID", OtherKey="From")]
	public EntitySet<SupportTo> movements1
	{
		get
		{
			return this._movements1;
		}
		set
		{
			this._movements1.Assign(value);
		}
	}
	
	[Association(Name="Village_movement3", Storage="_SupportTos", ThisKey="ID", OtherKey="To")]
	public EntitySet<SupportTo> SupportTos
	{
		get
		{
			return this._SupportTos;
		}
		set
		{
			this._SupportTos.Assign(value);
		}
	}
	
	[Association(Name="Village_movement4", Storage="_movements2", ThisKey="ID", OtherKey="From")]
	public EntitySet<TradingTo> movements2
	{
		get
		{
			return this._movements2;
		}
		set
		{
			this._movements2.Assign(value);
		}
	}
	
	[Association(Name="Village_movement5", Storage="_TradingTos", ThisKey="ID", OtherKey="To")]
	public EntitySet<TradingTo> TradingTos
	{
		get
		{
			return this._TradingTos;
		}
		set
		{
			this._TradingTos.Assign(value);
		}
	}
	
	[Association(Name="Village_movement6", Storage="_movements3", ThisKey="ID", OtherKey="From")]
	public EntitySet<Return> movements3
	{
		get
		{
			return this._movements3;
		}
		set
		{
			this._movements3.Assign(value);
		}
	}
	
	[Association(Name="Village_movement7", Storage="_Returns", ThisKey="ID", OtherKey="To")]
	public EntitySet<Return> Returns
	{
		get
		{
			return this._Returns;
		}
		set
		{
			this._Returns.Assign(value);
		}
	}
	
	[Association(Name="Village_movement8", Storage="_movements4", ThisKey="ID", OtherKey="From")]
	public EntitySet<AttackFrom> movements4
	{
		get
		{
			return this._movements4;
		}
		set
		{
			this._movements4.Assign(value);
		}
	}
	
	[Association(Name="Village_movement9", Storage="_AttackFroms", ThisKey="ID", OtherKey="To")]
	public EntitySet<AttackFrom> AttackFroms
	{
		get
		{
			return this._AttackFroms;
		}
		set
		{
			this._AttackFroms.Assign(value);
		}
	}
	
	[Association(Name="Village_movement10", Storage="_movements5", ThisKey="ID", OtherKey="From")]
	public EntitySet<SupportFrom> movements5
	{
		get
		{
			return this._movements5;
		}
		set
		{
			this._movements5.Assign(value);
		}
	}
	
	[Association(Name="Village_movement11", Storage="_SupportFroms", ThisKey="ID", OtherKey="To")]
	public EntitySet<SupportFrom> SupportFroms
	{
		get
		{
			return this._SupportFroms;
		}
		set
		{
			this._SupportFroms.Assign(value);
		}
	}
	
	[Association(Name="Village_movement12", Storage="_movements6", ThisKey="ID", OtherKey="From")]
	public EntitySet<TradingFrom> movements6
	{
		get
		{
			return this._movements6;
		}
		set
		{
			this._movements6.Assign(value);
		}
	}
	
	[Association(Name="Village_movement13", Storage="_TradingFroms", ThisKey="ID", OtherKey="To")]
	public EntitySet<TradingFrom> TradingFroms
	{
		get
		{
			return this._TradingFroms;
		}
		set
		{
			this._TradingFroms.Assign(value);
		}
	}
	
	[Association(Name="User_Village", Storage="_User", ThisKey="userid", OtherKey="Username", IsForeignKey=true)]
	public User User
	{
		get
		{
			return this._User.Entity;
		}
		set
		{
			User previousValue = this._User.Entity;
			if (((previousValue != value) 
						|| (this._User.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._User.Entity = null;
					previousValue.Villages.Remove(this);
				}
				this._User.Entity = value;
				if ((value != null))
				{
					value.Villages.Add(this);
					this._userid = value.Username;
				}
				else
				{
					this._userid = default(string);
				}
				this.SendPropertyChanged("User");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Offers(Offer entity)
	{
		this.SendPropertyChanging();
		entity.Village = this;
	}
	
	private void detach_Offers(Offer entity)
	{
		this.SendPropertyChanging();
		entity.Village = null;
	}
	
	private void attach_movements(AttackTo entity)
	{
		this.SendPropertyChanging();
		entity.Village = this;
	}
	
	private void detach_movements(AttackTo entity)
	{
		this.SendPropertyChanging();
		entity.Village = null;
	}
	
	private void attach_AttackTos(AttackTo entity)
	{
		this.SendPropertyChanging();
		entity.Village1 = this;
	}
	
	private void detach_AttackTos(AttackTo entity)
	{
		this.SendPropertyChanging();
		entity.Village1 = null;
	}
	
	private void attach_movements1(SupportTo entity)
	{
		this.SendPropertyChanging();
		entity.Village = this;
	}
	
	private void detach_movements1(SupportTo entity)
	{
		this.SendPropertyChanging();
		entity.Village = null;
	}
	
	private void attach_SupportTos(SupportTo entity)
	{
		this.SendPropertyChanging();
		entity.Village1 = this;
	}
	
	private void detach_SupportTos(SupportTo entity)
	{
		this.SendPropertyChanging();
		entity.Village1 = null;
	}
	
	private void attach_movements2(TradingTo entity)
	{
		this.SendPropertyChanging();
		entity.Village = this;
	}
	
	private void detach_movements2(TradingTo entity)
	{
		this.SendPropertyChanging();
		entity.Village = null;
	}
	
	private void attach_TradingTos(TradingTo entity)
	{
		this.SendPropertyChanging();
		entity.Village1 = this;
	}
	
	private void detach_TradingTos(TradingTo entity)
	{
		this.SendPropertyChanging();
		entity.Village1 = null;
	}
	
	private void attach_movements3(Return entity)
	{
		this.SendPropertyChanging();
		entity.Village = this;
	}
	
	private void detach_movements3(Return entity)
	{
		this.SendPropertyChanging();
		entity.Village = null;
	}
	
	private void attach_Returns(Return entity)
	{
		this.SendPropertyChanging();
		entity.Village1 = this;
	}
	
	private void detach_Returns(Return entity)
	{
		this.SendPropertyChanging();
		entity.Village1 = null;
	}
	
	private void attach_movements4(AttackFrom entity)
	{
		this.SendPropertyChanging();
		entity.Village = this;
	}
	
	private void detach_movements4(AttackFrom entity)
	{
		this.SendPropertyChanging();
		entity.Village = null;
	}
	
	private void attach_AttackFroms(AttackFrom entity)
	{
		this.SendPropertyChanging();
		entity.Village1 = this;
	}
	
	private void detach_AttackFroms(AttackFrom entity)
	{
		this.SendPropertyChanging();
		entity.Village1 = null;
	}
	
	private void attach_movements5(SupportFrom entity)
	{
		this.SendPropertyChanging();
		entity.Village = this;
	}
	
	private void detach_movements5(SupportFrom entity)
	{
		this.SendPropertyChanging();
		entity.Village = null;
	}
	
	private void attach_SupportFroms(SupportFrom entity)
	{
		this.SendPropertyChanging();
		entity.Village1 = this;
	}
	
	private void detach_SupportFroms(SupportFrom entity)
	{
		this.SendPropertyChanging();
		entity.Village1 = null;
	}
	
	private void attach_movements6(TradingFrom entity)
	{
		this.SendPropertyChanging();
		entity.Village = this;
	}
	
	private void detach_movements6(TradingFrom entity)
	{
		this.SendPropertyChanging();
		entity.Village = null;
	}
	
	private void attach_TradingFroms(TradingFrom entity)
	{
		this.SendPropertyChanging();
		entity.Village1 = this;
	}
	
	private void detach_TradingFroms(TradingFrom entity)
	{
		this.SendPropertyChanging();
		entity.Village1 = null;
	}
}

[Table(Name="dbo.movement")]
public partial class AttackTo : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _From;
	
	private int _To;
	
	private int _Type;
	
	private System.DateTime _StartingTime;
	
	private System.DateTime _LandingTime;
	
	private System.Nullable<int> _Building;
	
	private System.Nullable<int> _Scout;
	
	private System.Nullable<int> _Spear;
	
	private System.Nullable<int> _Sword;
	
	private System.Nullable<int> _Axe;
	
	private System.Nullable<int> _Light;
	
	private System.Nullable<int> _Heavy;
	
	private System.Nullable<int> _Ram;
	
	private System.Nullable<int> _Catapult;
	
	private System.Nullable<int> _Noble;
	
	private EntityRef<Village> _Village;
	
	private EntityRef<Village> _Village1;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnFromChanging(int value);
    partial void OnFromChanged();
    partial void OnToChanging(int value);
    partial void OnToChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    partial void OnStartingTimeChanging(System.DateTime value);
    partial void OnStartingTimeChanged();
    partial void OnLandingTimeChanging(System.DateTime value);
    partial void OnLandingTimeChanged();
    partial void OnBuildingChanging(System.Nullable<int> value);
    partial void OnBuildingChanged();
    partial void OnScoutChanging(System.Nullable<int> value);
    partial void OnScoutChanged();
    partial void OnSpearChanging(System.Nullable<int> value);
    partial void OnSpearChanged();
    partial void OnSwordChanging(System.Nullable<int> value);
    partial void OnSwordChanged();
    partial void OnAxeChanging(System.Nullable<int> value);
    partial void OnAxeChanged();
    partial void OnLightChanging(System.Nullable<int> value);
    partial void OnLightChanged();
    partial void OnHeavyChanging(System.Nullable<int> value);
    partial void OnHeavyChanged();
    partial void OnRamChanging(System.Nullable<int> value);
    partial void OnRamChanged();
    partial void OnCatapultChanging(System.Nullable<int> value);
    partial void OnCatapultChanged();
    partial void OnNobleChanging(System.Nullable<int> value);
    partial void OnNobleChanged();
    #endregion
	
	public AttackTo()
	{
		this._Village = default(EntityRef<Village>);
		this._Village1 = default(EntityRef<Village>);
		OnCreated();
	}
	
	[Column(Name="id", Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Name="[from]", Storage="_From", DbType="Int NOT NULL")]
	public int From
	{
		get
		{
			return this._From;
		}
		set
		{
			if ((this._From != value))
			{
				this.OnFromChanging(value);
				this.SendPropertyChanging();
				this._From = value;
				this.SendPropertyChanged("From");
				this.OnFromChanged();
			}
		}
	}
	
	[Column(Name="[to]", Storage="_To", DbType="Int NOT NULL")]
	public int To
	{
		get
		{
			return this._To;
		}
		set
		{
			if ((this._To != value))
			{
				this.OnToChanging(value);
				this.SendPropertyChanging();
				this._To = value;
				this.SendPropertyChanged("To");
				this.OnToChanged();
			}
		}
	}
	
	[Column(Name="type", Storage="_Type", DbType="Int NOT NULL")]
	public int Type
	{
		get
		{
			return this._Type;
		}
		set
		{
			if ((this._Type != value))
			{
				this.OnTypeChanging(value);
				this.SendPropertyChanging();
				this._Type = value;
				this.SendPropertyChanged("Type");
				this.OnTypeChanged();
			}
		}
	}
	
	[Column(Name="starting_time", Storage="_StartingTime", DbType="DateTime NOT NULL")]
	public System.DateTime StartingTime
	{
		get
		{
			return this._StartingTime;
		}
		set
		{
			if ((this._StartingTime != value))
			{
				this.OnStartingTimeChanging(value);
				this.SendPropertyChanging();
				this._StartingTime = value;
				this.SendPropertyChanged("StartingTime");
				this.OnStartingTimeChanged();
			}
		}
	}
	
	[Column(Name="landing_time", Storage="_LandingTime", DbType="DateTime NOT NULL")]
	public System.DateTime LandingTime
	{
		get
		{
			return this._LandingTime;
		}
		set
		{
			if ((this._LandingTime != value))
			{
				this.OnLandingTimeChanging(value);
				this.SendPropertyChanging();
				this._LandingTime = value;
				this.SendPropertyChanged("LandingTime");
				this.OnLandingTimeChanged();
			}
		}
	}
	
	[Column(Name="building", Storage="_Building", DbType="Int")]
	public System.Nullable<int> Building
	{
		get
		{
			return this._Building;
		}
		set
		{
			if ((this._Building != value))
			{
				this.OnBuildingChanging(value);
				this.SendPropertyChanging();
				this._Building = value;
				this.SendPropertyChanged("Building");
				this.OnBuildingChanged();
			}
		}
	}
	
	[Column(Name="scoutSent", Storage="_Scout", DbType="Int")]
	public System.Nullable<int> Scout
	{
		get
		{
			return this._Scout;
		}
		set
		{
			if ((this._Scout != value))
			{
				this.OnScoutChanging(value);
				this.SendPropertyChanging();
				this._Scout = value;
				this.SendPropertyChanged("Scout");
				this.OnScoutChanged();
			}
		}
	}
	
	[Column(Name="spearSent", Storage="_Spear", DbType="Int")]
	public System.Nullable<int> Spear
	{
		get
		{
			return this._Spear;
		}
		set
		{
			if ((this._Spear != value))
			{
				this.OnSpearChanging(value);
				this.SendPropertyChanging();
				this._Spear = value;
				this.SendPropertyChanged("Spear");
				this.OnSpearChanged();
			}
		}
	}
	
	[Column(Name="swordSent", Storage="_Sword", DbType="Int")]
	public System.Nullable<int> Sword
	{
		get
		{
			return this._Sword;
		}
		set
		{
			if ((this._Sword != value))
			{
				this.OnSwordChanging(value);
				this.SendPropertyChanging();
				this._Sword = value;
				this.SendPropertyChanged("Sword");
				this.OnSwordChanged();
			}
		}
	}
	
	[Column(Name="axeSent", Storage="_Axe", DbType="Int")]
	public System.Nullable<int> Axe
	{
		get
		{
			return this._Axe;
		}
		set
		{
			if ((this._Axe != value))
			{
				this.OnAxeChanging(value);
				this.SendPropertyChanging();
				this._Axe = value;
				this.SendPropertyChanged("Axe");
				this.OnAxeChanged();
			}
		}
	}
	
	[Column(Name="lightSent", Storage="_Light", DbType="Int")]
	public System.Nullable<int> Light
	{
		get
		{
			return this._Light;
		}
		set
		{
			if ((this._Light != value))
			{
				this.OnLightChanging(value);
				this.SendPropertyChanging();
				this._Light = value;
				this.SendPropertyChanged("Light");
				this.OnLightChanged();
			}
		}
	}
	
	[Column(Name="heavySent", Storage="_Heavy", DbType="Int")]
	public System.Nullable<int> Heavy
	{
		get
		{
			return this._Heavy;
		}
		set
		{
			if ((this._Heavy != value))
			{
				this.OnHeavyChanging(value);
				this.SendPropertyChanging();
				this._Heavy = value;
				this.SendPropertyChanged("Heavy");
				this.OnHeavyChanged();
			}
		}
	}
	
	[Column(Name="ramSent", Storage="_Ram", DbType="Int")]
	public System.Nullable<int> Ram
	{
		get
		{
			return this._Ram;
		}
		set
		{
			if ((this._Ram != value))
			{
				this.OnRamChanging(value);
				this.SendPropertyChanging();
				this._Ram = value;
				this.SendPropertyChanged("Ram");
				this.OnRamChanged();
			}
		}
	}
	
	[Column(Name="catapultSent", Storage="_Catapult", DbType="Int")]
	public System.Nullable<int> Catapult
	{
		get
		{
			return this._Catapult;
		}
		set
		{
			if ((this._Catapult != value))
			{
				this.OnCatapultChanging(value);
				this.SendPropertyChanging();
				this._Catapult = value;
				this.SendPropertyChanged("Catapult");
				this.OnCatapultChanged();
			}
		}
	}
	
	[Column(Name="nobleSent", Storage="_Noble", DbType="Int")]
	public System.Nullable<int> Noble
	{
		get
		{
			return this._Noble;
		}
		set
		{
			if ((this._Noble != value))
			{
				this.OnNobleChanging(value);
				this.SendPropertyChanging();
				this._Noble = value;
				this.SendPropertyChanged("Noble");
				this.OnNobleChanged();
			}
		}
	}
	
	[Association(Name="Village_movement", Storage="_Village", ThisKey="From", OtherKey="ID", IsForeignKey=true)]
	public Village Village
	{
		get
		{
			return this._Village.Entity;
		}
		set
		{
			Village previousValue = this._Village.Entity;
			if (((previousValue != value) 
						|| (this._Village.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Village.Entity = null;
					previousValue.movements.Remove(this);
				}
				this._Village.Entity = value;
				if ((value != null))
				{
					value.movements.Add(this);
					this._From = value.ID;
				}
				else
				{
					this._From = default(int);
				}
				this.SendPropertyChanged("Village");
			}
		}
	}
	
	[Association(Name="Village_movement1", Storage="_Village1", ThisKey="To", OtherKey="ID", IsForeignKey=true)]
	public Village Village1
	{
		get
		{
			return this._Village1.Entity;
		}
		set
		{
			Village previousValue = this._Village1.Entity;
			if (((previousValue != value) 
						|| (this._Village1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Village1.Entity = null;
					previousValue.AttackTos.Remove(this);
				}
				this._Village1.Entity = value;
				if ((value != null))
				{
					value.AttackTos.Add(this);
					this._To = value.ID;
				}
				else
				{
					this._To = default(int);
				}
				this.SendPropertyChanged("Village1");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.movement")]
public partial class SupportTo : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _From;
	
	private int _To;
	
	private int _Type;
	
	private System.DateTime _StartingTime;
	
	private System.DateTime _LandingTime;
	
	private System.Nullable<int> _Scout;
	
	private System.Nullable<int> _Spear;
	
	private System.Nullable<int> _Sword;
	
	private System.Nullable<int> _Axe;
	
	private System.Nullable<int> _Light;
	
	private System.Nullable<int> _Heavy;
	
	private System.Nullable<int> _Ram;
	
	private System.Nullable<int> _Catapult;
	
	private System.Nullable<int> _Noble;
	
	private EntityRef<Village> _Village;
	
	private EntityRef<Village> _Village1;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnFromChanging(int value);
    partial void OnFromChanged();
    partial void OnToChanging(int value);
    partial void OnToChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    partial void OnStartingTimeChanging(System.DateTime value);
    partial void OnStartingTimeChanged();
    partial void OnLandingTimeChanging(System.DateTime value);
    partial void OnLandingTimeChanged();
    partial void OnScoutChanging(System.Nullable<int> value);
    partial void OnScoutChanged();
    partial void OnSpearChanging(System.Nullable<int> value);
    partial void OnSpearChanged();
    partial void OnSwordChanging(System.Nullable<int> value);
    partial void OnSwordChanged();
    partial void OnAxeChanging(System.Nullable<int> value);
    partial void OnAxeChanged();
    partial void OnLightChanging(System.Nullable<int> value);
    partial void OnLightChanged();
    partial void OnHeavyChanging(System.Nullable<int> value);
    partial void OnHeavyChanged();
    partial void OnRamChanging(System.Nullable<int> value);
    partial void OnRamChanged();
    partial void OnCatapultChanging(System.Nullable<int> value);
    partial void OnCatapultChanged();
    partial void OnNobleChanging(System.Nullable<int> value);
    partial void OnNobleChanged();
    #endregion
	
	public SupportTo()
	{
		this._Village = default(EntityRef<Village>);
		this._Village1 = default(EntityRef<Village>);
		OnCreated();
	}
	
	[Column(Name="id", Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Name="[from]", Storage="_From", DbType="Int NOT NULL")]
	public int From
	{
		get
		{
			return this._From;
		}
		set
		{
			if ((this._From != value))
			{
				this.OnFromChanging(value);
				this.SendPropertyChanging();
				this._From = value;
				this.SendPropertyChanged("From");
				this.OnFromChanged();
			}
		}
	}
	
	[Column(Name="[to]", Storage="_To", DbType="Int NOT NULL")]
	public int To
	{
		get
		{
			return this._To;
		}
		set
		{
			if ((this._To != value))
			{
				this.OnToChanging(value);
				this.SendPropertyChanging();
				this._To = value;
				this.SendPropertyChanged("To");
				this.OnToChanged();
			}
		}
	}
	
	[Column(Name="type", Storage="_Type", DbType="Int NOT NULL")]
	public int Type
	{
		get
		{
			return this._Type;
		}
		set
		{
			if ((this._Type != value))
			{
				this.OnTypeChanging(value);
				this.SendPropertyChanging();
				this._Type = value;
				this.SendPropertyChanged("Type");
				this.OnTypeChanged();
			}
		}
	}
	
	[Column(Name="starting_time", Storage="_StartingTime", DbType="DateTime NOT NULL")]
	public System.DateTime StartingTime
	{
		get
		{
			return this._StartingTime;
		}
		set
		{
			if ((this._StartingTime != value))
			{
				this.OnStartingTimeChanging(value);
				this.SendPropertyChanging();
				this._StartingTime = value;
				this.SendPropertyChanged("StartingTime");
				this.OnStartingTimeChanged();
			}
		}
	}
	
	[Column(Name="landing_time", Storage="_LandingTime", DbType="DateTime NOT NULL")]
	public System.DateTime LandingTime
	{
		get
		{
			return this._LandingTime;
		}
		set
		{
			if ((this._LandingTime != value))
			{
				this.OnLandingTimeChanging(value);
				this.SendPropertyChanging();
				this._LandingTime = value;
				this.SendPropertyChanged("LandingTime");
				this.OnLandingTimeChanged();
			}
		}
	}
	
	[Column(Name="scoutSent", Storage="_Scout", DbType="Int")]
	public System.Nullable<int> Scout
	{
		get
		{
			return this._Scout;
		}
		set
		{
			if ((this._Scout != value))
			{
				this.OnScoutChanging(value);
				this.SendPropertyChanging();
				this._Scout = value;
				this.SendPropertyChanged("Scout");
				this.OnScoutChanged();
			}
		}
	}
	
	[Column(Name="spearSent", Storage="_Spear", DbType="Int")]
	public System.Nullable<int> Spear
	{
		get
		{
			return this._Spear;
		}
		set
		{
			if ((this._Spear != value))
			{
				this.OnSpearChanging(value);
				this.SendPropertyChanging();
				this._Spear = value;
				this.SendPropertyChanged("Spear");
				this.OnSpearChanged();
			}
		}
	}
	
	[Column(Name="swordSent", Storage="_Sword", DbType="Int")]
	public System.Nullable<int> Sword
	{
		get
		{
			return this._Sword;
		}
		set
		{
			if ((this._Sword != value))
			{
				this.OnSwordChanging(value);
				this.SendPropertyChanging();
				this._Sword = value;
				this.SendPropertyChanged("Sword");
				this.OnSwordChanged();
			}
		}
	}
	
	[Column(Name="axeSent", Storage="_Axe", DbType="Int")]
	public System.Nullable<int> Axe
	{
		get
		{
			return this._Axe;
		}
		set
		{
			if ((this._Axe != value))
			{
				this.OnAxeChanging(value);
				this.SendPropertyChanging();
				this._Axe = value;
				this.SendPropertyChanged("Axe");
				this.OnAxeChanged();
			}
		}
	}
	
	[Column(Name="lightSent", Storage="_Light", DbType="Int")]
	public System.Nullable<int> Light
	{
		get
		{
			return this._Light;
		}
		set
		{
			if ((this._Light != value))
			{
				this.OnLightChanging(value);
				this.SendPropertyChanging();
				this._Light = value;
				this.SendPropertyChanged("Light");
				this.OnLightChanged();
			}
		}
	}
	
	[Column(Name="heavySent", Storage="_Heavy", DbType="Int")]
	public System.Nullable<int> Heavy
	{
		get
		{
			return this._Heavy;
		}
		set
		{
			if ((this._Heavy != value))
			{
				this.OnHeavyChanging(value);
				this.SendPropertyChanging();
				this._Heavy = value;
				this.SendPropertyChanged("Heavy");
				this.OnHeavyChanged();
			}
		}
	}
	
	[Column(Name="ramSent", Storage="_Ram", DbType="Int")]
	public System.Nullable<int> Ram
	{
		get
		{
			return this._Ram;
		}
		set
		{
			if ((this._Ram != value))
			{
				this.OnRamChanging(value);
				this.SendPropertyChanging();
				this._Ram = value;
				this.SendPropertyChanged("Ram");
				this.OnRamChanged();
			}
		}
	}
	
	[Column(Name="catapultSent", Storage="_Catapult", DbType="Int")]
	public System.Nullable<int> Catapult
	{
		get
		{
			return this._Catapult;
		}
		set
		{
			if ((this._Catapult != value))
			{
				this.OnCatapultChanging(value);
				this.SendPropertyChanging();
				this._Catapult = value;
				this.SendPropertyChanged("Catapult");
				this.OnCatapultChanged();
			}
		}
	}
	
	[Column(Name="nobleSent", Storage="_Noble", DbType="Int")]
	public System.Nullable<int> Noble
	{
		get
		{
			return this._Noble;
		}
		set
		{
			if ((this._Noble != value))
			{
				this.OnNobleChanging(value);
				this.SendPropertyChanging();
				this._Noble = value;
				this.SendPropertyChanged("Noble");
				this.OnNobleChanged();
			}
		}
	}
	
	[Association(Name="Village_movement2", Storage="_Village", ThisKey="From", OtherKey="ID", IsForeignKey=true)]
	public Village Village
	{
		get
		{
			return this._Village.Entity;
		}
		set
		{
			Village previousValue = this._Village.Entity;
			if (((previousValue != value) 
						|| (this._Village.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Village.Entity = null;
					previousValue.movements1.Remove(this);
				}
				this._Village.Entity = value;
				if ((value != null))
				{
					value.movements1.Add(this);
					this._From = value.ID;
				}
				else
				{
					this._From = default(int);
				}
				this.SendPropertyChanged("Village");
			}
		}
	}
	
	[Association(Name="Village_movement3", Storage="_Village1", ThisKey="To", OtherKey="ID", IsForeignKey=true)]
	public Village Village1
	{
		get
		{
			return this._Village1.Entity;
		}
		set
		{
			Village previousValue = this._Village1.Entity;
			if (((previousValue != value) 
						|| (this._Village1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Village1.Entity = null;
					previousValue.SupportTos.Remove(this);
				}
				this._Village1.Entity = value;
				if ((value != null))
				{
					value.SupportTos.Add(this);
					this._To = value.ID;
				}
				else
				{
					this._To = default(int);
				}
				this.SendPropertyChanged("Village1");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.movement")]
public partial class TradingTo : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _From;
	
	private int _To;
	
	private int _Type;
	
	private System.DateTime _StartingTime;
	
	private System.DateTime _LandingTime;
	
	private System.Nullable<int> _Iron;
	
	private System.Nullable<int> _Clay;
	
	private System.Nullable<int> _Wood;
	
	private EntityRef<Village> _Village;
	
	private EntityRef<Village> _Village1;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnFromChanging(int value);
    partial void OnFromChanged();
    partial void OnToChanging(int value);
    partial void OnToChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    partial void OnStartingTimeChanging(System.DateTime value);
    partial void OnStartingTimeChanged();
    partial void OnLandingTimeChanging(System.DateTime value);
    partial void OnLandingTimeChanged();
    partial void OnIronChanging(System.Nullable<int> value);
    partial void OnIronChanged();
    partial void OnClayChanging(System.Nullable<int> value);
    partial void OnClayChanged();
    partial void OnWoodChanging(System.Nullable<int> value);
    partial void OnWoodChanged();
    #endregion
	
	public TradingTo()
	{
		this._Village = default(EntityRef<Village>);
		this._Village1 = default(EntityRef<Village>);
		OnCreated();
	}
	
	[Column(Name="id", Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Name="[from]", Storage="_From", DbType="Int NOT NULL")]
	public int From
	{
		get
		{
			return this._From;
		}
		set
		{
			if ((this._From != value))
			{
				this.OnFromChanging(value);
				this.SendPropertyChanging();
				this._From = value;
				this.SendPropertyChanged("From");
				this.OnFromChanged();
			}
		}
	}
	
	[Column(Name="[to]", Storage="_To", DbType="Int NOT NULL")]
	public int To
	{
		get
		{
			return this._To;
		}
		set
		{
			if ((this._To != value))
			{
				this.OnToChanging(value);
				this.SendPropertyChanging();
				this._To = value;
				this.SendPropertyChanged("To");
				this.OnToChanged();
			}
		}
	}
	
	[Column(Name="type", Storage="_Type", DbType="Int NOT NULL")]
	public int Type
	{
		get
		{
			return this._Type;
		}
		set
		{
			if ((this._Type != value))
			{
				this.OnTypeChanging(value);
				this.SendPropertyChanging();
				this._Type = value;
				this.SendPropertyChanged("Type");
				this.OnTypeChanged();
			}
		}
	}
	
	[Column(Name="starting_time", Storage="_StartingTime", DbType="DateTime NOT NULL")]
	public System.DateTime StartingTime
	{
		get
		{
			return this._StartingTime;
		}
		set
		{
			if ((this._StartingTime != value))
			{
				this.OnStartingTimeChanging(value);
				this.SendPropertyChanging();
				this._StartingTime = value;
				this.SendPropertyChanged("StartingTime");
				this.OnStartingTimeChanged();
			}
		}
	}
	
	[Column(Name="landing_time", Storage="_LandingTime", DbType="DateTime NOT NULL")]
	public System.DateTime LandingTime
	{
		get
		{
			return this._LandingTime;
		}
		set
		{
			if ((this._LandingTime != value))
			{
				this.OnLandingTimeChanging(value);
				this.SendPropertyChanging();
				this._LandingTime = value;
				this.SendPropertyChanged("LandingTime");
				this.OnLandingTimeChanged();
			}
		}
	}
	
	[Column(Name="iron", Storage="_Iron", DbType="Int")]
	public System.Nullable<int> Iron
	{
		get
		{
			return this._Iron;
		}
		set
		{
			if ((this._Iron != value))
			{
				this.OnIronChanging(value);
				this.SendPropertyChanging();
				this._Iron = value;
				this.SendPropertyChanged("Iron");
				this.OnIronChanged();
			}
		}
	}
	
	[Column(Name="clay", Storage="_Clay", DbType="Int")]
	public System.Nullable<int> Clay
	{
		get
		{
			return this._Clay;
		}
		set
		{
			if ((this._Clay != value))
			{
				this.OnClayChanging(value);
				this.SendPropertyChanging();
				this._Clay = value;
				this.SendPropertyChanged("Clay");
				this.OnClayChanged();
			}
		}
	}
	
	[Column(Name="wood", Storage="_Wood", DbType="Int")]
	public System.Nullable<int> Wood
	{
		get
		{
			return this._Wood;
		}
		set
		{
			if ((this._Wood != value))
			{
				this.OnWoodChanging(value);
				this.SendPropertyChanging();
				this._Wood = value;
				this.SendPropertyChanged("Wood");
				this.OnWoodChanged();
			}
		}
	}
	
	[Association(Name="Village_movement4", Storage="_Village", ThisKey="From", OtherKey="ID", IsForeignKey=true)]
	public Village Village
	{
		get
		{
			return this._Village.Entity;
		}
		set
		{
			Village previousValue = this._Village.Entity;
			if (((previousValue != value) 
						|| (this._Village.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Village.Entity = null;
					previousValue.movements2.Remove(this);
				}
				this._Village.Entity = value;
				if ((value != null))
				{
					value.movements2.Add(this);
					this._From = value.ID;
				}
				else
				{
					this._From = default(int);
				}
				this.SendPropertyChanged("Village");
			}
		}
	}
	
	[Association(Name="Village_movement5", Storage="_Village1", ThisKey="To", OtherKey="ID", IsForeignKey=true)]
	public Village Village1
	{
		get
		{
			return this._Village1.Entity;
		}
		set
		{
			Village previousValue = this._Village1.Entity;
			if (((previousValue != value) 
						|| (this._Village1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Village1.Entity = null;
					previousValue.TradingTos.Remove(this);
				}
				this._Village1.Entity = value;
				if ((value != null))
				{
					value.TradingTos.Add(this);
					this._To = value.ID;
				}
				else
				{
					this._To = default(int);
				}
				this.SendPropertyChanged("Village1");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.movement")]
public partial class Return : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _From;
	
	private int _To;
	
	private int _Type;
	
	private System.DateTime _StartingTime;
	
	private System.DateTime _LandingTime;
	
	private System.Nullable<int> _Sword;
	
	private System.Nullable<int> _Axe;
	
	private System.Nullable<int> _Scout;
	
	private System.Nullable<int> _Light;
	
	private System.Nullable<int> _Heavy;
	
	private System.Nullable<int> _Ram;
	
	private System.Nullable<int> _Catapult;
	
	private System.Nullable<int> _Noble;
	
	private System.Nullable<int> _Iron;
	
	private System.Nullable<int> _Clay;
	
	private System.Nullable<int> _Wood;
	
	private EntityRef<Village> _Village;
	
	private EntityRef<Village> _Village1;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnFromChanging(int value);
    partial void OnFromChanged();
    partial void OnToChanging(int value);
    partial void OnToChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    partial void OnStartingTimeChanging(System.DateTime value);
    partial void OnStartingTimeChanged();
    partial void OnLandingTimeChanging(System.DateTime value);
    partial void OnLandingTimeChanged();
    partial void OnSwordChanging(System.Nullable<int> value);
    partial void OnSwordChanged();
    partial void OnAxeChanging(System.Nullable<int> value);
    partial void OnAxeChanged();
    partial void OnScoutChanging(System.Nullable<int> value);
    partial void OnScoutChanged();
    partial void OnLightChanging(System.Nullable<int> value);
    partial void OnLightChanged();
    partial void OnHeavyChanging(System.Nullable<int> value);
    partial void OnHeavyChanged();
    partial void OnRamChanging(System.Nullable<int> value);
    partial void OnRamChanged();
    partial void OnCatapultChanging(System.Nullable<int> value);
    partial void OnCatapultChanged();
    partial void OnNobleChanging(System.Nullable<int> value);
    partial void OnNobleChanged();
    partial void OnIronChanging(System.Nullable<int> value);
    partial void OnIronChanged();
    partial void OnClayChanging(System.Nullable<int> value);
    partial void OnClayChanged();
    partial void OnWoodChanging(System.Nullable<int> value);
    partial void OnWoodChanged();
    #endregion
	
	public Return()
	{
		this._Village = default(EntityRef<Village>);
		this._Village1 = default(EntityRef<Village>);
		OnCreated();
	}
	
	[Column(Name="id", Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Name="[from]", Storage="_From", DbType="Int NOT NULL")]
	public int From
	{
		get
		{
			return this._From;
		}
		set
		{
			if ((this._From != value))
			{
				this.OnFromChanging(value);
				this.SendPropertyChanging();
				this._From = value;
				this.SendPropertyChanged("From");
				this.OnFromChanged();
			}
		}
	}
	
	[Column(Name="[to]", Storage="_To", DbType="Int NOT NULL")]
	public int To
	{
		get
		{
			return this._To;
		}
		set
		{
			if ((this._To != value))
			{
				this.OnToChanging(value);
				this.SendPropertyChanging();
				this._To = value;
				this.SendPropertyChanged("To");
				this.OnToChanged();
			}
		}
	}
	
	[Column(Name="type", Storage="_Type", DbType="Int NOT NULL")]
	public int Type
	{
		get
		{
			return this._Type;
		}
		set
		{
			if ((this._Type != value))
			{
				this.OnTypeChanging(value);
				this.SendPropertyChanging();
				this._Type = value;
				this.SendPropertyChanged("Type");
				this.OnTypeChanged();
			}
		}
	}
	
	[Column(Name="starting_time", Storage="_StartingTime", DbType="DateTime NOT NULL")]
	public System.DateTime StartingTime
	{
		get
		{
			return this._StartingTime;
		}
		set
		{
			if ((this._StartingTime != value))
			{
				this.OnStartingTimeChanging(value);
				this.SendPropertyChanging();
				this._StartingTime = value;
				this.SendPropertyChanged("StartingTime");
				this.OnStartingTimeChanged();
			}
		}
	}
	
	[Column(Name="landing_time", Storage="_LandingTime", DbType="DateTime NOT NULL")]
	public System.DateTime LandingTime
	{
		get
		{
			return this._LandingTime;
		}
		set
		{
			if ((this._LandingTime != value))
			{
				this.OnLandingTimeChanging(value);
				this.SendPropertyChanging();
				this._LandingTime = value;
				this.SendPropertyChanged("LandingTime");
				this.OnLandingTimeChanged();
			}
		}
	}
	
	[Column(Name="swordReturnt", Storage="_Sword", DbType="Int")]
	public System.Nullable<int> Sword
	{
		get
		{
			return this._Sword;
		}
		set
		{
			if ((this._Sword != value))
			{
				this.OnSwordChanging(value);
				this.SendPropertyChanging();
				this._Sword = value;
				this.SendPropertyChanged("Sword");
				this.OnSwordChanged();
			}
		}
	}
	
	[Column(Name="axeReturnt", Storage="_Axe", DbType="Int")]
	public System.Nullable<int> Axe
	{
		get
		{
			return this._Axe;
		}
		set
		{
			if ((this._Axe != value))
			{
				this.OnAxeChanging(value);
				this.SendPropertyChanging();
				this._Axe = value;
				this.SendPropertyChanged("Axe");
				this.OnAxeChanged();
			}
		}
	}
	
	[Column(Name="scoutReturnt", Storage="_Scout", DbType="Int")]
	public System.Nullable<int> Scout
	{
		get
		{
			return this._Scout;
		}
		set
		{
			if ((this._Scout != value))
			{
				this.OnScoutChanging(value);
				this.SendPropertyChanging();
				this._Scout = value;
				this.SendPropertyChanged("Scout");
				this.OnScoutChanged();
			}
		}
	}
	
	[Column(Name="lightReturnt", Storage="_Light", DbType="Int")]
	public System.Nullable<int> Light
	{
		get
		{
			return this._Light;
		}
		set
		{
			if ((this._Light != value))
			{
				this.OnLightChanging(value);
				this.SendPropertyChanging();
				this._Light = value;
				this.SendPropertyChanged("Light");
				this.OnLightChanged();
			}
		}
	}
	
	[Column(Name="heavyReturnt", Storage="_Heavy", DbType="Int")]
	public System.Nullable<int> Heavy
	{
		get
		{
			return this._Heavy;
		}
		set
		{
			if ((this._Heavy != value))
			{
				this.OnHeavyChanging(value);
				this.SendPropertyChanging();
				this._Heavy = value;
				this.SendPropertyChanged("Heavy");
				this.OnHeavyChanged();
			}
		}
	}
	
	[Column(Name="ramReturnt", Storage="_Ram", DbType="Int")]
	public System.Nullable<int> Ram
	{
		get
		{
			return this._Ram;
		}
		set
		{
			if ((this._Ram != value))
			{
				this.OnRamChanging(value);
				this.SendPropertyChanging();
				this._Ram = value;
				this.SendPropertyChanged("Ram");
				this.OnRamChanged();
			}
		}
	}
	
	[Column(Name="catapultReturnt", Storage="_Catapult", DbType="Int")]
	public System.Nullable<int> Catapult
	{
		get
		{
			return this._Catapult;
		}
		set
		{
			if ((this._Catapult != value))
			{
				this.OnCatapultChanging(value);
				this.SendPropertyChanging();
				this._Catapult = value;
				this.SendPropertyChanged("Catapult");
				this.OnCatapultChanged();
			}
		}
	}
	
	[Column(Name="nobleReturnt", Storage="_Noble", DbType="Int")]
	public System.Nullable<int> Noble
	{
		get
		{
			return this._Noble;
		}
		set
		{
			if ((this._Noble != value))
			{
				this.OnNobleChanging(value);
				this.SendPropertyChanging();
				this._Noble = value;
				this.SendPropertyChanged("Noble");
				this.OnNobleChanged();
			}
		}
	}
	
	[Column(Name="iron", Storage="_Iron", DbType="Int")]
	public System.Nullable<int> Iron
	{
		get
		{
			return this._Iron;
		}
		set
		{
			if ((this._Iron != value))
			{
				this.OnIronChanging(value);
				this.SendPropertyChanging();
				this._Iron = value;
				this.SendPropertyChanged("Iron");
				this.OnIronChanged();
			}
		}
	}
	
	[Column(Name="clay", Storage="_Clay", DbType="Int")]
	public System.Nullable<int> Clay
	{
		get
		{
			return this._Clay;
		}
		set
		{
			if ((this._Clay != value))
			{
				this.OnClayChanging(value);
				this.SendPropertyChanging();
				this._Clay = value;
				this.SendPropertyChanged("Clay");
				this.OnClayChanged();
			}
		}
	}
	
	[Column(Name="wood", Storage="_Wood", DbType="Int")]
	public System.Nullable<int> Wood
	{
		get
		{
			return this._Wood;
		}
		set
		{
			if ((this._Wood != value))
			{
				this.OnWoodChanging(value);
				this.SendPropertyChanging();
				this._Wood = value;
				this.SendPropertyChanged("Wood");
				this.OnWoodChanged();
			}
		}
	}
	
	[Association(Name="Village_movement6", Storage="_Village", ThisKey="From", OtherKey="ID", IsForeignKey=true)]
	public Village Village
	{
		get
		{
			return this._Village.Entity;
		}
		set
		{
			Village previousValue = this._Village.Entity;
			if (((previousValue != value) 
						|| (this._Village.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Village.Entity = null;
					previousValue.movements3.Remove(this);
				}
				this._Village.Entity = value;
				if ((value != null))
				{
					value.movements3.Add(this);
					this._From = value.ID;
				}
				else
				{
					this._From = default(int);
				}
				this.SendPropertyChanged("Village");
			}
		}
	}
	
	[Association(Name="Village_movement7", Storage="_Village1", ThisKey="To", OtherKey="ID", IsForeignKey=true)]
	public Village Village1
	{
		get
		{
			return this._Village1.Entity;
		}
		set
		{
			Village previousValue = this._Village1.Entity;
			if (((previousValue != value) 
						|| (this._Village1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Village1.Entity = null;
					previousValue.Returns.Remove(this);
				}
				this._Village1.Entity = value;
				if ((value != null))
				{
					value.Returns.Add(this);
					this._To = value.ID;
				}
				else
				{
					this._To = default(int);
				}
				this.SendPropertyChanged("Village1");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.movement")]
public partial class AttackFrom : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _From;
	
	private int _To;
	
	private int _Type;
	
	private System.DateTime _StartingTime;
	
	private System.DateTime _LandingTime;
	
	private System.Nullable<int> _Building;
	
	private System.Nullable<int> _Scout;
	
	private System.Nullable<int> _Spear;
	
	private System.Nullable<int> _Sword;
	
	private System.Nullable<int> _Axe;
	
	private System.Nullable<int> _Light;
	
	private System.Nullable<int> _Heavy;
	
	private System.Nullable<int> _Ram;
	
	private System.Nullable<int> _Catapult;
	
	private System.Nullable<int> _Noble;
	
	private EntityRef<Village> _Village;
	
	private EntityRef<Village> _Village1;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnFromChanging(int value);
    partial void OnFromChanged();
    partial void OnToChanging(int value);
    partial void OnToChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    partial void OnStartingTimeChanging(System.DateTime value);
    partial void OnStartingTimeChanged();
    partial void OnLandingTimeChanging(System.DateTime value);
    partial void OnLandingTimeChanged();
    partial void OnBuildingChanging(System.Nullable<int> value);
    partial void OnBuildingChanged();
    partial void OnScoutChanging(System.Nullable<int> value);
    partial void OnScoutChanged();
    partial void OnSpearChanging(System.Nullable<int> value);
    partial void OnSpearChanged();
    partial void OnSwordChanging(System.Nullable<int> value);
    partial void OnSwordChanged();
    partial void OnAxeChanging(System.Nullable<int> value);
    partial void OnAxeChanged();
    partial void OnLightChanging(System.Nullable<int> value);
    partial void OnLightChanged();
    partial void OnHeavyChanging(System.Nullable<int> value);
    partial void OnHeavyChanged();
    partial void OnRamChanging(System.Nullable<int> value);
    partial void OnRamChanged();
    partial void OnCatapultChanging(System.Nullable<int> value);
    partial void OnCatapultChanged();
    partial void OnNobleChanging(System.Nullable<int> value);
    partial void OnNobleChanged();
    #endregion
	
	public AttackFrom()
	{
		this._Village = default(EntityRef<Village>);
		this._Village1 = default(EntityRef<Village>);
		OnCreated();
	}
	
	[Column(Name="id", Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Name="[from]", Storage="_From", DbType="Int NOT NULL")]
	public int From
	{
		get
		{
			return this._From;
		}
		set
		{
			if ((this._From != value))
			{
				this.OnFromChanging(value);
				this.SendPropertyChanging();
				this._From = value;
				this.SendPropertyChanged("From");
				this.OnFromChanged();
			}
		}
	}
	
	[Column(Name="[to]", Storage="_To", DbType="Int NOT NULL")]
	public int To
	{
		get
		{
			return this._To;
		}
		set
		{
			if ((this._To != value))
			{
				this.OnToChanging(value);
				this.SendPropertyChanging();
				this._To = value;
				this.SendPropertyChanged("To");
				this.OnToChanged();
			}
		}
	}
	
	[Column(Name="type", Storage="_Type", DbType="Int NOT NULL")]
	public int Type
	{
		get
		{
			return this._Type;
		}
		set
		{
			if ((this._Type != value))
			{
				this.OnTypeChanging(value);
				this.SendPropertyChanging();
				this._Type = value;
				this.SendPropertyChanged("Type");
				this.OnTypeChanged();
			}
		}
	}
	
	[Column(Name="starting_time", Storage="_StartingTime", DbType="DateTime NOT NULL")]
	public System.DateTime StartingTime
	{
		get
		{
			return this._StartingTime;
		}
		set
		{
			if ((this._StartingTime != value))
			{
				this.OnStartingTimeChanging(value);
				this.SendPropertyChanging();
				this._StartingTime = value;
				this.SendPropertyChanged("StartingTime");
				this.OnStartingTimeChanged();
			}
		}
	}
	
	[Column(Name="landing_time", Storage="_LandingTime", DbType="DateTime NOT NULL")]
	public System.DateTime LandingTime
	{
		get
		{
			return this._LandingTime;
		}
		set
		{
			if ((this._LandingTime != value))
			{
				this.OnLandingTimeChanging(value);
				this.SendPropertyChanging();
				this._LandingTime = value;
				this.SendPropertyChanged("LandingTime");
				this.OnLandingTimeChanged();
			}
		}
	}
	
	[Column(Name="building", Storage="_Building", DbType="Int")]
	public System.Nullable<int> Building
	{
		get
		{
			return this._Building;
		}
		set
		{
			if ((this._Building != value))
			{
				this.OnBuildingChanging(value);
				this.SendPropertyChanging();
				this._Building = value;
				this.SendPropertyChanged("Building");
				this.OnBuildingChanged();
			}
		}
	}
	
	[Column(Name="scoutSent", Storage="_Scout", DbType="Int")]
	public System.Nullable<int> Scout
	{
		get
		{
			return this._Scout;
		}
		set
		{
			if ((this._Scout != value))
			{
				this.OnScoutChanging(value);
				this.SendPropertyChanging();
				this._Scout = value;
				this.SendPropertyChanged("Scout");
				this.OnScoutChanged();
			}
		}
	}
	
	[Column(Name="spearSent", Storage="_Spear", DbType="Int")]
	public System.Nullable<int> Spear
	{
		get
		{
			return this._Spear;
		}
		set
		{
			if ((this._Spear != value))
			{
				this.OnSpearChanging(value);
				this.SendPropertyChanging();
				this._Spear = value;
				this.SendPropertyChanged("Spear");
				this.OnSpearChanged();
			}
		}
	}
	
	[Column(Name="swordSent", Storage="_Sword", DbType="Int")]
	public System.Nullable<int> Sword
	{
		get
		{
			return this._Sword;
		}
		set
		{
			if ((this._Sword != value))
			{
				this.OnSwordChanging(value);
				this.SendPropertyChanging();
				this._Sword = value;
				this.SendPropertyChanged("Sword");
				this.OnSwordChanged();
			}
		}
	}
	
	[Column(Name="axeSent", Storage="_Axe", DbType="Int")]
	public System.Nullable<int> Axe
	{
		get
		{
			return this._Axe;
		}
		set
		{
			if ((this._Axe != value))
			{
				this.OnAxeChanging(value);
				this.SendPropertyChanging();
				this._Axe = value;
				this.SendPropertyChanged("Axe");
				this.OnAxeChanged();
			}
		}
	}
	
	[Column(Name="lightSent", Storage="_Light", DbType="Int")]
	public System.Nullable<int> Light
	{
		get
		{
			return this._Light;
		}
		set
		{
			if ((this._Light != value))
			{
				this.OnLightChanging(value);
				this.SendPropertyChanging();
				this._Light = value;
				this.SendPropertyChanged("Light");
				this.OnLightChanged();
			}
		}
	}
	
	[Column(Name="heavySent", Storage="_Heavy", DbType="Int")]
	public System.Nullable<int> Heavy
	{
		get
		{
			return this._Heavy;
		}
		set
		{
			if ((this._Heavy != value))
			{
				this.OnHeavyChanging(value);
				this.SendPropertyChanging();
				this._Heavy = value;
				this.SendPropertyChanged("Heavy");
				this.OnHeavyChanged();
			}
		}
	}
	
	[Column(Name="ramSent", Storage="_Ram", DbType="Int")]
	public System.Nullable<int> Ram
	{
		get
		{
			return this._Ram;
		}
		set
		{
			if ((this._Ram != value))
			{
				this.OnRamChanging(value);
				this.SendPropertyChanging();
				this._Ram = value;
				this.SendPropertyChanged("Ram");
				this.OnRamChanged();
			}
		}
	}
	
	[Column(Name="catapultSent", Storage="_Catapult", DbType="Int")]
	public System.Nullable<int> Catapult
	{
		get
		{
			return this._Catapult;
		}
		set
		{
			if ((this._Catapult != value))
			{
				this.OnCatapultChanging(value);
				this.SendPropertyChanging();
				this._Catapult = value;
				this.SendPropertyChanged("Catapult");
				this.OnCatapultChanged();
			}
		}
	}
	
	[Column(Name="nobleSent", Storage="_Noble", DbType="Int")]
	public System.Nullable<int> Noble
	{
		get
		{
			return this._Noble;
		}
		set
		{
			if ((this._Noble != value))
			{
				this.OnNobleChanging(value);
				this.SendPropertyChanging();
				this._Noble = value;
				this.SendPropertyChanged("Noble");
				this.OnNobleChanged();
			}
		}
	}
	
	[Association(Name="Village_movement8", Storage="_Village", ThisKey="From", OtherKey="ID", IsForeignKey=true)]
	public Village Village
	{
		get
		{
			return this._Village.Entity;
		}
		set
		{
			Village previousValue = this._Village.Entity;
			if (((previousValue != value) 
						|| (this._Village.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Village.Entity = null;
					previousValue.movements4.Remove(this);
				}
				this._Village.Entity = value;
				if ((value != null))
				{
					value.movements4.Add(this);
					this._From = value.ID;
				}
				else
				{
					this._From = default(int);
				}
				this.SendPropertyChanged("Village");
			}
		}
	}
	
	[Association(Name="Village_movement9", Storage="_Village1", ThisKey="To", OtherKey="ID", IsForeignKey=true)]
	public Village Village1
	{
		get
		{
			return this._Village1.Entity;
		}
		set
		{
			Village previousValue = this._Village1.Entity;
			if (((previousValue != value) 
						|| (this._Village1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Village1.Entity = null;
					previousValue.AttackFroms.Remove(this);
				}
				this._Village1.Entity = value;
				if ((value != null))
				{
					value.AttackFroms.Add(this);
					this._To = value.ID;
				}
				else
				{
					this._To = default(int);
				}
				this.SendPropertyChanged("Village1");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.movement")]
public partial class SupportFrom : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _From;
	
	private int _To;
	
	private int _Type;
	
	private System.DateTime _StartingTime;
	
	private System.DateTime _LandingTime;
	
	private System.Nullable<int> _Scout;
	
	private System.Nullable<int> _Spear;
	
	private System.Nullable<int> _Sword;
	
	private System.Nullable<int> _Axe;
	
	private System.Nullable<int> _Light;
	
	private System.Nullable<int> _Heavy;
	
	private System.Nullable<int> _Ram;
	
	private System.Nullable<int> _Catapult;
	
	private System.Nullable<int> _Noble;
	
	private EntityRef<Village> _Village;
	
	private EntityRef<Village> _Village1;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnFromChanging(int value);
    partial void OnFromChanged();
    partial void OnToChanging(int value);
    partial void OnToChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    partial void OnStartingTimeChanging(System.DateTime value);
    partial void OnStartingTimeChanged();
    partial void OnLandingTimeChanging(System.DateTime value);
    partial void OnLandingTimeChanged();
    partial void OnScoutChanging(System.Nullable<int> value);
    partial void OnScoutChanged();
    partial void OnSpearChanging(System.Nullable<int> value);
    partial void OnSpearChanged();
    partial void OnSwordChanging(System.Nullable<int> value);
    partial void OnSwordChanged();
    partial void OnAxeChanging(System.Nullable<int> value);
    partial void OnAxeChanged();
    partial void OnLightChanging(System.Nullable<int> value);
    partial void OnLightChanged();
    partial void OnHeavyChanging(System.Nullable<int> value);
    partial void OnHeavyChanged();
    partial void OnRamChanging(System.Nullable<int> value);
    partial void OnRamChanged();
    partial void OnCatapultChanging(System.Nullable<int> value);
    partial void OnCatapultChanged();
    partial void OnNobleChanging(System.Nullable<int> value);
    partial void OnNobleChanged();
    #endregion
	
	public SupportFrom()
	{
		this._Village = default(EntityRef<Village>);
		this._Village1 = default(EntityRef<Village>);
		OnCreated();
	}
	
	[Column(Name="id", Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Name="[from]", Storage="_From", DbType="Int NOT NULL")]
	public int From
	{
		get
		{
			return this._From;
		}
		set
		{
			if ((this._From != value))
			{
				this.OnFromChanging(value);
				this.SendPropertyChanging();
				this._From = value;
				this.SendPropertyChanged("From");
				this.OnFromChanged();
			}
		}
	}
	
	[Column(Name="[to]", Storage="_To", DbType="Int NOT NULL")]
	public int To
	{
		get
		{
			return this._To;
		}
		set
		{
			if ((this._To != value))
			{
				this.OnToChanging(value);
				this.SendPropertyChanging();
				this._To = value;
				this.SendPropertyChanged("To");
				this.OnToChanged();
			}
		}
	}
	
	[Column(Name="type", Storage="_Type", DbType="Int NOT NULL")]
	public int Type
	{
		get
		{
			return this._Type;
		}
		set
		{
			if ((this._Type != value))
			{
				this.OnTypeChanging(value);
				this.SendPropertyChanging();
				this._Type = value;
				this.SendPropertyChanged("Type");
				this.OnTypeChanged();
			}
		}
	}
	
	[Column(Name="starting_time", Storage="_StartingTime", DbType="DateTime NOT NULL")]
	public System.DateTime StartingTime
	{
		get
		{
			return this._StartingTime;
		}
		set
		{
			if ((this._StartingTime != value))
			{
				this.OnStartingTimeChanging(value);
				this.SendPropertyChanging();
				this._StartingTime = value;
				this.SendPropertyChanged("StartingTime");
				this.OnStartingTimeChanged();
			}
		}
	}
	
	[Column(Name="landing_time", Storage="_LandingTime", DbType="DateTime NOT NULL")]
	public System.DateTime LandingTime
	{
		get
		{
			return this._LandingTime;
		}
		set
		{
			if ((this._LandingTime != value))
			{
				this.OnLandingTimeChanging(value);
				this.SendPropertyChanging();
				this._LandingTime = value;
				this.SendPropertyChanged("LandingTime");
				this.OnLandingTimeChanged();
			}
		}
	}
	
	[Column(Name="scoutSent", Storage="_Scout", DbType="Int")]
	public System.Nullable<int> Scout
	{
		get
		{
			return this._Scout;
		}
		set
		{
			if ((this._Scout != value))
			{
				this.OnScoutChanging(value);
				this.SendPropertyChanging();
				this._Scout = value;
				this.SendPropertyChanged("Scout");
				this.OnScoutChanged();
			}
		}
	}
	
	[Column(Name="spearSent", Storage="_Spear", DbType="Int")]
	public System.Nullable<int> Spear
	{
		get
		{
			return this._Spear;
		}
		set
		{
			if ((this._Spear != value))
			{
				this.OnSpearChanging(value);
				this.SendPropertyChanging();
				this._Spear = value;
				this.SendPropertyChanged("Spear");
				this.OnSpearChanged();
			}
		}
	}
	
	[Column(Name="swordSent", Storage="_Sword", DbType="Int")]
	public System.Nullable<int> Sword
	{
		get
		{
			return this._Sword;
		}
		set
		{
			if ((this._Sword != value))
			{
				this.OnSwordChanging(value);
				this.SendPropertyChanging();
				this._Sword = value;
				this.SendPropertyChanged("Sword");
				this.OnSwordChanged();
			}
		}
	}
	
	[Column(Name="axeSent", Storage="_Axe", DbType="Int")]
	public System.Nullable<int> Axe
	{
		get
		{
			return this._Axe;
		}
		set
		{
			if ((this._Axe != value))
			{
				this.OnAxeChanging(value);
				this.SendPropertyChanging();
				this._Axe = value;
				this.SendPropertyChanged("Axe");
				this.OnAxeChanged();
			}
		}
	}
	
	[Column(Name="lightSent", Storage="_Light", DbType="Int")]
	public System.Nullable<int> Light
	{
		get
		{
			return this._Light;
		}
		set
		{
			if ((this._Light != value))
			{
				this.OnLightChanging(value);
				this.SendPropertyChanging();
				this._Light = value;
				this.SendPropertyChanged("Light");
				this.OnLightChanged();
			}
		}
	}
	
	[Column(Name="heavySent", Storage="_Heavy", DbType="Int")]
	public System.Nullable<int> Heavy
	{
		get
		{
			return this._Heavy;
		}
		set
		{
			if ((this._Heavy != value))
			{
				this.OnHeavyChanging(value);
				this.SendPropertyChanging();
				this._Heavy = value;
				this.SendPropertyChanged("Heavy");
				this.OnHeavyChanged();
			}
		}
	}
	
	[Column(Name="ramSent", Storage="_Ram", DbType="Int")]
	public System.Nullable<int> Ram
	{
		get
		{
			return this._Ram;
		}
		set
		{
			if ((this._Ram != value))
			{
				this.OnRamChanging(value);
				this.SendPropertyChanging();
				this._Ram = value;
				this.SendPropertyChanged("Ram");
				this.OnRamChanged();
			}
		}
	}
	
	[Column(Name="catapultSent", Storage="_Catapult", DbType="Int")]
	public System.Nullable<int> Catapult
	{
		get
		{
			return this._Catapult;
		}
		set
		{
			if ((this._Catapult != value))
			{
				this.OnCatapultChanging(value);
				this.SendPropertyChanging();
				this._Catapult = value;
				this.SendPropertyChanged("Catapult");
				this.OnCatapultChanged();
			}
		}
	}
	
	[Column(Name="nobleSent", Storage="_Noble", DbType="Int")]
	public System.Nullable<int> Noble
	{
		get
		{
			return this._Noble;
		}
		set
		{
			if ((this._Noble != value))
			{
				this.OnNobleChanging(value);
				this.SendPropertyChanging();
				this._Noble = value;
				this.SendPropertyChanged("Noble");
				this.OnNobleChanged();
			}
		}
	}
	
	[Association(Name="Village_movement10", Storage="_Village", ThisKey="From", OtherKey="ID", IsForeignKey=true)]
	public Village Village
	{
		get
		{
			return this._Village.Entity;
		}
		set
		{
			Village previousValue = this._Village.Entity;
			if (((previousValue != value) 
						|| (this._Village.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Village.Entity = null;
					previousValue.movements5.Remove(this);
				}
				this._Village.Entity = value;
				if ((value != null))
				{
					value.movements5.Add(this);
					this._From = value.ID;
				}
				else
				{
					this._From = default(int);
				}
				this.SendPropertyChanged("Village");
			}
		}
	}
	
	[Association(Name="Village_movement11", Storage="_Village1", ThisKey="To", OtherKey="ID", IsForeignKey=true)]
	public Village Village1
	{
		get
		{
			return this._Village1.Entity;
		}
		set
		{
			Village previousValue = this._Village1.Entity;
			if (((previousValue != value) 
						|| (this._Village1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Village1.Entity = null;
					previousValue.SupportFroms.Remove(this);
				}
				this._Village1.Entity = value;
				if ((value != null))
				{
					value.SupportFroms.Add(this);
					this._To = value.ID;
				}
				else
				{
					this._To = default(int);
				}
				this.SendPropertyChanged("Village1");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.movement")]
public partial class TradingFrom : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _From;
	
	private int _To;
	
	private int _Type;
	
	private System.DateTime _StartingTime;
	
	private System.DateTime _LandingTime;
	
	private System.Nullable<int> _Iron;
	
	private System.Nullable<int> _Clay;
	
	private System.Nullable<int> _Wood;
	
	private EntityRef<Village> _Village;
	
	private EntityRef<Village> _Village1;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnFromChanging(int value);
    partial void OnFromChanged();
    partial void OnToChanging(int value);
    partial void OnToChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    partial void OnStartingTimeChanging(System.DateTime value);
    partial void OnStartingTimeChanged();
    partial void OnLandingTimeChanging(System.DateTime value);
    partial void OnLandingTimeChanged();
    partial void OnIronChanging(System.Nullable<int> value);
    partial void OnIronChanged();
    partial void OnClayChanging(System.Nullable<int> value);
    partial void OnClayChanged();
    partial void OnWoodChanging(System.Nullable<int> value);
    partial void OnWoodChanged();
    #endregion
	
	public TradingFrom()
	{
		this._Village = default(EntityRef<Village>);
		this._Village1 = default(EntityRef<Village>);
		OnCreated();
	}
	
	[Column(Name="id", Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Name="[from]", Storage="_From", DbType="Int NOT NULL")]
	public int From
	{
		get
		{
			return this._From;
		}
		set
		{
			if ((this._From != value))
			{
				this.OnFromChanging(value);
				this.SendPropertyChanging();
				this._From = value;
				this.SendPropertyChanged("From");
				this.OnFromChanged();
			}
		}
	}
	
	[Column(Name="[to]", Storage="_To", DbType="Int NOT NULL")]
	public int To
	{
		get
		{
			return this._To;
		}
		set
		{
			if ((this._To != value))
			{
				this.OnToChanging(value);
				this.SendPropertyChanging();
				this._To = value;
				this.SendPropertyChanged("To");
				this.OnToChanged();
			}
		}
	}
	
	[Column(Name="type", Storage="_Type", DbType="Int NOT NULL")]
	public int Type
	{
		get
		{
			return this._Type;
		}
		set
		{
			if ((this._Type != value))
			{
				this.OnTypeChanging(value);
				this.SendPropertyChanging();
				this._Type = value;
				this.SendPropertyChanged("Type");
				this.OnTypeChanged();
			}
		}
	}
	
	[Column(Name="starting_time", Storage="_StartingTime", DbType="DateTime NOT NULL")]
	public System.DateTime StartingTime
	{
		get
		{
			return this._StartingTime;
		}
		set
		{
			if ((this._StartingTime != value))
			{
				this.OnStartingTimeChanging(value);
				this.SendPropertyChanging();
				this._StartingTime = value;
				this.SendPropertyChanged("StartingTime");
				this.OnStartingTimeChanged();
			}
		}
	}
	
	[Column(Name="landing_time", Storage="_LandingTime", DbType="DateTime NOT NULL")]
	public System.DateTime LandingTime
	{
		get
		{
			return this._LandingTime;
		}
		set
		{
			if ((this._LandingTime != value))
			{
				this.OnLandingTimeChanging(value);
				this.SendPropertyChanging();
				this._LandingTime = value;
				this.SendPropertyChanged("LandingTime");
				this.OnLandingTimeChanged();
			}
		}
	}
	
	[Column(Name="iron", Storage="_Iron", DbType="Int")]
	public System.Nullable<int> Iron
	{
		get
		{
			return this._Iron;
		}
		set
		{
			if ((this._Iron != value))
			{
				this.OnIronChanging(value);
				this.SendPropertyChanging();
				this._Iron = value;
				this.SendPropertyChanged("Iron");
				this.OnIronChanged();
			}
		}
	}
	
	[Column(Name="clay", Storage="_Clay", DbType="Int")]
	public System.Nullable<int> Clay
	{
		get
		{
			return this._Clay;
		}
		set
		{
			if ((this._Clay != value))
			{
				this.OnClayChanging(value);
				this.SendPropertyChanging();
				this._Clay = value;
				this.SendPropertyChanged("Clay");
				this.OnClayChanged();
			}
		}
	}
	
	[Column(Name="wood", Storage="_Wood", DbType="Int")]
	public System.Nullable<int> Wood
	{
		get
		{
			return this._Wood;
		}
		set
		{
			if ((this._Wood != value))
			{
				this.OnWoodChanging(value);
				this.SendPropertyChanging();
				this._Wood = value;
				this.SendPropertyChanged("Wood");
				this.OnWoodChanged();
			}
		}
	}
	
	[Association(Name="Village_movement12", Storage="_Village", ThisKey="From", OtherKey="ID", IsForeignKey=true)]
	public Village Village
	{
		get
		{
			return this._Village.Entity;
		}
		set
		{
			Village previousValue = this._Village.Entity;
			if (((previousValue != value) 
						|| (this._Village.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Village.Entity = null;
					previousValue.movements6.Remove(this);
				}
				this._Village.Entity = value;
				if ((value != null))
				{
					value.movements6.Add(this);
					this._From = value.ID;
				}
				else
				{
					this._From = default(int);
				}
				this.SendPropertyChanged("Village");
			}
		}
	}
	
	[Association(Name="Village_movement13", Storage="_Village1", ThisKey="To", OtherKey="ID", IsForeignKey=true)]
	public Village Village1
	{
		get
		{
			return this._Village1.Entity;
		}
		set
		{
			Village previousValue = this._Village1.Entity;
			if (((previousValue != value) 
						|| (this._Village1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Village1.Entity = null;
					previousValue.TradingFroms.Remove(this);
				}
				this._Village1.Entity = value;
				if ((value != null))
				{
					value.TradingFroms.Add(this);
					this._To = value.ID;
				}
				else
				{
					this._To = default(int);
				}
				this.SendPropertyChanged("Village1");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}
#pragma warning restore 1591
